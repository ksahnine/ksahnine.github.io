<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inovia Blog</title>
    <description>Excursions technologiques, par Kadda SAHNINE
</description>
    <link>http://ksahnine.github.io/</link>
    <atom:link href="http://ksahnine.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 15 Aug 2015 00:08:49 +0200</pubDate>
    <lastBuildDate>Sat, 15 Aug 2015 00:08:49 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Analyse du hashtag #TelAvivSurSeine</title>
        <description>&lt;p&gt;L&amp;#39;organisation de l&amp;#39;opération &lt;em&gt;&amp;quot;Tel Aviv Sur Seine&amp;quot;&lt;/em&gt; a suscité une &lt;a href=&quot;http://www.lemonde.fr/societe/article/2015/08/09/tel-aviv-sur-seine-la-mairie-de-paris-ne-renonce-pas-malgre-la-polemique_4718346_3224.html&quot;&gt;importante polémique&lt;/a&gt; née d&amp;#39;abord au sein des &lt;strong&gt;réseaux sociaux&lt;/strong&gt; (&lt;em&gt;Twitter&lt;/em&gt; en particulier) avant de prendre une tournure &lt;strong&gt;politique&lt;/strong&gt; puis &lt;strong&gt;médiatique&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Le souflet est déjà retombé, mais cette polémique est une leçon pour l&amp;#39;avenir car elle révèle la puissance des réseaux sociaux comme moyen de &lt;strong&gt;peser sur l&amp;#39;agenda médiatique&lt;/strong&gt; et l&amp;#39;incapacité des médias traditionnels à &lt;strong&gt;distinguer un mouvement spontané d&amp;#39;une opération militante&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/nico_vanderb&quot;&gt;Nicolas Vanderbiest&lt;/a&gt;, assistant universitaire à l’université catholique de Louvain et spécialiste des réseaux sociaux, est l&amp;#39;auteur &lt;a href=&quot;http://rue89.nouvelobs.com/2015/08/11/telavivsurseine-dun-tweet-a-bfmtv-lastroturfing-mode-demploi-260700&quot;&gt;d&amp;#39;un article&lt;/a&gt; fort instructif décrivant l&amp;#39;exploitation du hashtag &lt;code&gt;#TelAvivSurSeine&lt;/code&gt; par un nombre restreint de militants très engagés, et le manque de clairvoyance des médias face à l&amp;#39;&lt;a href=&quot;https://fr.wikipedia.org/wiki/Astroturfing&quot;&gt;&lt;strong&gt;astroturfing&lt;/strong&gt;&lt;/a&gt;, une technique de manipulation de l&amp;#39;opinion.&lt;/p&gt;

&lt;p&gt;La démonstration de Nicolas souffre néanmoins d&amp;#39;un petit défaut, celui de s&amp;#39;appuyer sur des outils propriétaires et payants (&lt;a href=&quot;http://www.visibrain.com/fr/&quot;&gt;&lt;em&gt;Visibrain Focus&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Je n&amp;#39;ai évidemment pas la prétention de faire aussi bien que &lt;em&gt;Visibrain&lt;/em&gt; mais il est possible de s&amp;#39;adonner soi-même à l&amp;#39;&lt;strong&gt;exploration de données&lt;/strong&gt; en étant suffisamment habile sous &lt;strong&gt;UNIX&lt;/strong&gt; et relativement à l&amp;#39;aise avec le langage &lt;strong&gt;Python&lt;/strong&gt;.&lt;br /&gt;
Je me suis prêté à cet exercice par &lt;strong&gt;simple curiosité intellectuelle&lt;/strong&gt;, et certainement pas pour des considérations politiques ou militantes.&lt;/p&gt;

&lt;p&gt;J&amp;#39;en ai tiré les faits suivants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la mobilisation sur &lt;em&gt;Twitter&lt;/em&gt; contre l&amp;#39;évènement &lt;code&gt;#TelAvivSurSeine&lt;/code&gt; n&amp;#39;est pas assis sur un mouvement massif, spontané et populaire&lt;/li&gt;
&lt;li&gt;elle est d&amp;#39;abord le fait d&amp;#39;une poignée de comptes militants jouissant d&amp;#39;une certaine audience et liés les uns aux autres par des affinités politiques ou identitaires&lt;/li&gt;
&lt;li&gt;le compte du &lt;em&gt;Parti de Gauche&lt;/em&gt; et de militants adhérents à ce parti a joué un rôle important dans la médiatisation de la polémique, à l&amp;#39;instar de comptes de personnalités connues et pro évènement&lt;/li&gt;
&lt;li&gt;la campagne BDS du &lt;em&gt;10 Août 2015&lt;/em&gt; contre l&amp;#39;évènement a été efficace et coordonnée&lt;/li&gt;
&lt;li&gt;sur toutes les périodes étudiées, les clients Twitter les plus utilisés sont, dans l&amp;#39;ordre, le client &lt;em&gt;iPhone&lt;/em&gt;, le client &lt;em&gt;Android&lt;/em&gt; puis le client &lt;em&gt;Web&lt;/em&gt; &lt;strong&gt;sauf&lt;/strong&gt; le &lt;em&gt;10 Août 2015&lt;/em&gt; autour de 19h où c&amp;#39;est le client &lt;em&gt;Web&lt;/em&gt; (navigateur) qui arrive en tête. Cette anormalité pourrait s&amp;#39;expliquer par une utilisation de comptes fictifs durant cette période, et destinés à &lt;em&gt;faire du bruit&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je présenterai dans cet article les résultats obtenus en évitant les digressions techniques car l&amp;#39;article serait trop long.&lt;br /&gt;
Dans mon prochain billet, j&amp;#39;aborderai à nouveau ce sujet mais sous un angle beaucoup plus technique, à l&amp;#39;occasion duquel je publierai sur &lt;a href=&quot;https://github.com/ksahnine&quot;&gt;mon compte &lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt; l&amp;#39;ensemble du code source m&amp;#39;ayant permis d&amp;#39;obtenir ces résultats.&lt;/p&gt;

&lt;h3&gt;Collecte des données&lt;/h3&gt;

&lt;p&gt;Le script de collecte consiste à rechercher l&amp;#39;ensemble des tweets portant le hashtag &lt;code&gt;#TelAvivSurSeine&lt;/code&gt;. Il s&amp;#39;appuie sur &lt;code&gt;tweepy&lt;/code&gt;, un excellent client de l&amp;#39;API Twitter pour l&amp;#39;écosystème Python.&lt;br /&gt;
J&amp;#39;ai pu collecter &lt;code&gt;76 698&lt;/code&gt; tweets au format &lt;strong&gt;JSON&lt;/strong&gt; sur une période allant du &lt;em&gt;03 Août 2015 10h49&lt;/em&gt; au &lt;em&gt;12 Août 2015 08h03&lt;/em&gt;, stockés dans des fichiers horodatés (&lt;code&gt;2015-08-*DD*_tweets.json&lt;/code&gt;) et représantant plus de 800 Mo de données brutes.&lt;br /&gt;
Chaque tweet collecté au format JSON contient une masse très importante d&amp;#39;informations que nous exploiterons avec l&amp;#39;utilitaire &lt;code&gt;jq&lt;/code&gt;, l&amp;#39;équivalent de la commande &lt;code&gt;grep&lt;/code&gt; adaptée au format JSON.&lt;br /&gt;
La structure d&amp;#39;un tweet est décrite sur le &lt;a href=&quot;https://dev.twitter.com/overview/api/tweets&quot;&gt;portail de dev de Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Eléments statistiques sur l&amp;#39;ensemble de la période&lt;/h3&gt;

&lt;p&gt;Commençons par comptabiliser le nombre total de tweets ainsi que les comptes ayant tweeté :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wc -l *.json
   &lt;span class=&quot;m&quot;&gt;76698&lt;/span&gt; total
~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jq &lt;span class=&quot;s1&quot;&gt;&amp;#39;.user.screen_name&amp;#39;&lt;/span&gt; *.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -u &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -l
   16666&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En 2 commandes on établit qu&amp;#39;il y a eu &lt;code&gt;76 698&lt;/code&gt; tweets pour &lt;code&gt;16 666&lt;/code&gt; comptes, soit une moyenne de &lt;strong&gt;4,6 tweets par compte&lt;/strong&gt;. C&amp;#39;est un premier signe suggérant l&amp;#39;utilisation d&amp;#39;une technique de manipulation d&amp;#39;opinion, l&amp;#39;&lt;a href=&quot;https://fr.wikipedia.org/wiki/Astroturfing&quot;&gt;astroturfing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Voyons comment sont répartis les tweets par type de support :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat *.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s2&quot;&gt;&amp;quot;.source&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/&amp;quot;\(&amp;lt;.*&amp;gt;\)\(.*\)\(&amp;lt;.*&amp;gt;\)&amp;quot;/\2/&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -3
&lt;span class=&quot;m&quot;&gt;23210&lt;/span&gt; Twitter &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; iPhone
&lt;span class=&quot;m&quot;&gt;21341&lt;/span&gt; Twitter &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; Android
&lt;span class=&quot;m&quot;&gt;19954&lt;/span&gt; Twitter Web Client&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous en aurons besoin plus tard. Relevons au passage que l&amp;#39;activité est majoritairement mobile.&lt;/p&gt;

&lt;h3&gt;Courbe des tweets et RT&lt;/h3&gt;

&lt;p&gt;Il est aisé de produire en une commande la série temporelle du nombre de tweets par tranche horaire. La seule petite difficulté consiste à convertir l&amp;#39;heure UTC du tweet en heure locale :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat *.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s2&quot;&gt;&amp;quot;.created_at&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -I ? date -j -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;%a %h %d %H:%M:%S %z %Y&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;?&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;+%Y-%m-%d_%H:00:00&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ *//;s/ /,/&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{ print $2 &amp;quot;,&amp;quot; $1}&amp;#39;&lt;/span&gt; &amp;gt; data.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La représentation graphique est réalisée avec &lt;strong&gt;GNU Plot&lt;/strong&gt; :
&lt;a href=&quot;/assets/article_images/TelAv_timeseries.png&quot;&gt;&lt;img src=&quot;/assets/article_images/TelAv_timeseries.png&quot; alt=&quot;Timeseries du hashtag #TelAvivSurSeine&quot;&gt;&lt;/a&gt;
Ce qui interpelle de prime abord, c&amp;#39;est le &lt;strong&gt;pic brutal&lt;/strong&gt; du &lt;em&gt;10 Août&lt;/em&gt; vers &lt;em&gt;19h&lt;/em&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On peut mesurer l&amp;#39;influence d&amp;#39;un compte en comptabilisant le nombre de retweets.&lt;br /&gt;
Etablissons le classement des comptes les plus retweetés le &lt;em&gt;10 Août&lt;/em&gt; entre &lt;em&gt;18h00&lt;/em&gt; et &lt;em&gt;19h59&lt;/em&gt; (heure locale) :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat 2015-08-10_tweets.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s1&quot;&gt;&amp;#39;.|select(.created_at|match(&amp;quot;Mon Aug 10 1[6-7].*&amp;quot;))|.retweeted_status.user.screen_name&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -3
 &lt;span class=&quot;m&quot;&gt;337&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Campagnebds&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;m&quot;&gt;114&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;LePG&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Thalwen&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On constate que le compte &lt;code&gt;@Campagnebds&lt;/code&gt; ressort très largement en tête.&lt;br /&gt;
Ce pic peut donc être parfaitement corrélé avec l&amp;#39;annonce d&amp;#39;un &lt;a href=&quot;https://twitter.com/Campagnebds/status/630378884563906560&quot;&gt;&lt;em&gt;tweet storm&lt;/em&gt;&lt;/a&gt; sur le compte de la campagne &lt;a href=&quot;https://fr.wikipedia.org/wiki/Boycott,_d%C3%A9sinvestissement_et_sanctions&quot;&gt;BDS (&lt;em&gt;Boycott, Désinvestissement et Sanctions&lt;/em&gt;)&lt;/a&gt; :
&lt;center&gt;&lt;img src=&quot;/assets/article_images/bds.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;A noter la présence en seconde position du compte du &lt;em&gt;Parti de Gauche&lt;/em&gt; : la polémique prend largement une &lt;strong&gt;tournure politique&lt;/strong&gt;. On ne reverra plus jamais le compte du PdG à une telle position dans le classement des RT.&lt;/p&gt;

&lt;p&gt;Revenons au graphique. On ne constate pas de mouvement significatif entre le &lt;em&gt;03 Août&lt;/em&gt;, date du premier tweet, et le &lt;em&gt;08 Août&lt;/em&gt; peu avant midi.&lt;br /&gt;
L&amp;#39;emballement commence le &lt;em&gt;08 Août&lt;/em&gt; à partir de midi avec une pointe vers &lt;em&gt;14h&lt;/em&gt; heure locale.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;De la même façon, identifions les 5 comptes les plus retweeté le &lt;em&gt;08 Août&lt;/em&gt; entre &lt;em&gt;12h00&lt;/em&gt; et &lt;em&gt;14h59&lt;/em&gt; (heure locale)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat 2015-08-08_tweets.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s1&quot;&gt;&amp;#39;.|select(.created_at|match(&amp;quot;Sat Aug 08 1[0-2].*&amp;quot;))|.retweeted_status.user.screen_name&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -5
 &lt;span class=&quot;m&quot;&gt;214&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pauldraszen&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;m&quot;&gt;213&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;KarimaB_&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;m&quot;&gt;155&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MadjidFalastine&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;m&quot;&gt;131&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;keyzer_usual&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;m&quot;&gt;124&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Alkanz&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Effectuons la même opération mais en rajoutant le nombre d&amp;#39;abonnés à ces comptes et en formatant le résultat avec l&amp;#39;utilitaire &lt;code&gt;csvlook&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Nb_rtweet Nb_Followers Compte&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; cat 2015-08-08_tweets.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq --raw-output &lt;span class=&quot;s1&quot;&gt;&amp;#39;[.|select(.created_at|match(&amp;quot;Sat Aug 08 1[0-2].*&amp;quot;))|.retweeted_status.user.followers_count,.retweeted_status.user.screen_name] | @csv&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tr &lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^ *$/d;/^,$/d&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -k2 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -cf1 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -k1rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ *//&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -5 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; csvlook -d&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  Nb_rtweet &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Nb_Followers &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Compte           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;214&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1199&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pauldraszen      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;213&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13046&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; KarimaB_         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;155&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2748&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; MadjidFalastine  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;131&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7165&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; keyzer_usual     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;124&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32831&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Alkanz           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tous ces comptes sont connus pour être très engagés dans la promotion de la cause palestinienne.&lt;br /&gt;
Il me semble évident qu&amp;#39;ils ont été à l&amp;#39;avant garde de la montée du hashtag (premiers pics du graphique).&lt;/p&gt;

&lt;p&gt;Si on élargit la recherche à l&amp;#39;ensemble de la journée, on retrouve d&amp;#39;autres comptes à forte audience, tous critiques à l&amp;#39;égard de l&amp;#39;évènement :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  Nb_rtweet &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Nb_Followers &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Compte           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;625&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12594&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ybenderbal       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;544&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13045&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; KarimaB_         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;477&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1199&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pauldraszen      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;424&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2748&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; MadjidFalastine  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;374&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22067&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Linformatrice    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;324&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3047&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; oxymorus         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;313&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32831&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Alkanz           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;269&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8426&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; DionJack2        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;268&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7265&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; s_assbague       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;257&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12765&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; LeBjrTristesse   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sur la seule journée du &lt;em&gt;08&lt;/em&gt;, les retweets de ces 10 comptes représentent &lt;strong&gt;près d&amp;#39;un quart&lt;/strong&gt; du nombre total de tweets (&lt;code&gt;3 875&lt;/code&gt; sur &lt;code&gt;16 658&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;Courbe des tweets et RT par canal&lt;/h3&gt;

&lt;p&gt;Nous avions vu plus haut que les principaux supports utilisés sont en moyenne, par ordre d&amp;#39;utilisation, l&amp;#39;&lt;em&gt;iPhone&lt;/em&gt;, un terminal &lt;em&gt;Android&lt;/em&gt; et un &lt;em&gt;navigateur web&lt;/em&gt; non mobile.
La distribution des tweets par canal est intéressante :
&lt;a href=&quot;/assets/article_images/iphone.png&quot;&gt;&lt;img src=&quot;/assets/article_images/iphone.png&quot; alt=&quot;Courbe des tweets via iPhone&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/article_images/android.png&quot;&gt;&lt;img src=&quot;/assets/article_images/android.png&quot; alt=&quot;Courbe des tweets via Android&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/article_images/web.png&quot;&gt;&lt;img src=&quot;/assets/article_images/web.png&quot; alt=&quot;Courbe des tweets via un navigateur Web&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Les profils d&amp;#39;activité pour les canaux &lt;em&gt;iPhone&lt;/em&gt;, &lt;em&gt;Android&lt;/em&gt; et &lt;em&gt;web&lt;/em&gt; sont assez semblables.&lt;br /&gt;
En superposant les courbes, l&amp;#39;activité &lt;em&gt;web&lt;/em&gt; est toujours substantiellement en deçà des supports &lt;em&gt;iPhone&lt;/em&gt; et &lt;em&gt;Android&lt;/em&gt; &lt;strong&gt;sauf durant le pic du &lt;em&gt;10 Août&lt;/em&gt; vers 19h00&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cette sur-activité sur ce canal est peut-être induite par des comptes fictifs, mais il n&amp;#39;y a pas de certitude.&lt;/p&gt;

&lt;h3&gt;Classement des &lt;em&gt;hashtags&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;En comptabilisant les hashtags associés à &lt;code&gt;#telavivsurseine&lt;/code&gt;, on peut dégager les sentiments dominants. &lt;br /&gt;
La commande ci-dessous permets d&amp;#39;extraire les 20 mots croisillons les plus populaires :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Nb,Hashtag&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; cat *.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s2&quot;&gt;&amp;quot;.entities.hashtags[].text&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tr &lt;span class=&quot;s1&quot;&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tr &lt;span class=&quot;s1&quot;&gt;&amp;#39;[àâäéèêëîïôöùûü]&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;[aaaeeeeiioouuu]&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ *//;s/ /,/&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -20 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; csvlook
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--------+-------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  Nb    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Hashtag                 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--------+-------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;77070&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; telavivsurseine         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;5834&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; apartheidsurseine       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2880&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; israel                  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2767&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; gaza                    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2406&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; paris                   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1868&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; againsttelavivsurseine  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1860&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; parisplages             &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1668&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; contretelavivsurseine   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1666&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; telaviv                 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1608&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; gazasurseine            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1606&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; parislovestlv           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1351&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; palestine               &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;843&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; freepalestine           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;822&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bds                     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;787&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; parisplage              &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;621&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; france                  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;515&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; icc4israel              &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;462&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; hidalgo                 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;434&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; apartheid               &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;372&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; boycottisrael           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--------+-------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Classement des comptes les plus mentionnés&lt;/h3&gt;

&lt;p&gt;La commande ci-dessous permet d&amp;#39;établir les 20 comptes les plus mentionnés, ce qui permet de qualifier leur &lt;strong&gt;réputation&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Nb,Compte&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; cat *.json &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s2&quot;&gt;&amp;quot;.entities.user_mentions[].screen_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ *//;s/ /,/&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -rn &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -20 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; csvlook
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  Nb   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Compte           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;8859&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Anne_Hidalgo     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1772&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ybenderbal       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1500&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; BrunoJulliard    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1380&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Paris            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1317&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; KarimaB_         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1137&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ericcoquerel     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1134&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Campagnebds      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1130&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Linformatrice    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1119&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Simonnet2        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;936&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jeremo12         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;909&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; MadjidFalastine  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;884&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Alkanz           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;845&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Barakacity       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;826&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pauldraszen      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;808&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; s_assbague       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;803&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; oxymorus         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;748&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; YASMINAREBEL     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;611&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; keyzer_usual     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;611&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; PKlugman         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;588&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; itele            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-------+------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On y trouve pèle mèle :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;des politiques&lt;/li&gt;
&lt;li&gt;des activistes déjà identifiés plus haut&lt;/li&gt;
&lt;li&gt;des comptes média généraliste et communautaires&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Classement des 20 comptes ayant été le plus retweetés&lt;/h3&gt;

&lt;p&gt;Le nombre de retweets est un indicateur &lt;strong&gt;d&amp;#39;influence&lt;/strong&gt;. On retrouve dans ce classement les comptes des principaux protagonistes, où dominent les comptes d&amp;#39;obédience pro palestiniennes :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--------+-----------------+---------------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  Nb RT &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Compte          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Date Creation                   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--------+-----------------+---------------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1759&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ybenderbal      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Mar &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt; 22:51:26 +0000 &lt;span class=&quot;m&quot;&gt;2012&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1085&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; KarimaB_        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Mar &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; 14:36:25 +0000 &lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1054&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Linformatrice   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Aug &lt;span class=&quot;m&quot;&gt;04&lt;/span&gt; 02:18:52 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1045&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Campagnebds     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Tue Dec &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; 20:33:31 +0000 &lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;916&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jeremo12        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Feb &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt; 22:54:54 +0000 &lt;span class=&quot;m&quot;&gt;2012&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;856&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; MadjidFalastine &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun May &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; 17:44:54 +0000 &lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;825&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Barakacity      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Oct &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; 17:08:53 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;809&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pauldraszen     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Wed Apr &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; 22:04:56 +0000 &lt;span class=&quot;m&quot;&gt;2010&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;795&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; oxymorus        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Jul &lt;span class=&quot;m&quot;&gt;03&lt;/span&gt; 04:27:09 +0000 &lt;span class=&quot;m&quot;&gt;2010&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;738&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; s_assbague      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Jun &lt;span class=&quot;m&quot;&gt;09&lt;/span&gt; 18:04:58 +0000 &lt;span class=&quot;m&quot;&gt;2013&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;717&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Alkanz          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Jul &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt; 18:45:04 +0000 &lt;span class=&quot;m&quot;&gt;2007&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;648&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; YASMINAREBEL    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Jan &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; 14:26:25 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;611&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; keyzer_usual    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Jan &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; 22:19:09 +0000 &lt;span class=&quot;m&quot;&gt;2013&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;472&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; EladRatson      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Feb &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt; 17:16:34 +0000 &lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;468&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; opFethi         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Apr &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; 22:53:43 +0000 &lt;span class=&quot;m&quot;&gt;2013&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;464&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; mllesosso       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mon Dec &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt; 10:15:10 +0000 &lt;span class=&quot;m&quot;&gt;2008&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;442&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pierrebleue3d   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Nov &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; 22:53:42 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;441&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; julienbahloul   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Jan &lt;span class=&quot;m&quot;&gt;09&lt;/span&gt; 08:40:16 +0000 &lt;span class=&quot;m&quot;&gt;2010&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;421&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thalwen         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Jul &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; 17:09:19 +0000 &lt;span class=&quot;m&quot;&gt;2012&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;419&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ZohraBitan      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Sep &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 16:13:46 +0000 &lt;span class=&quot;m&quot;&gt;2010&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--------+-----------------+---------------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Classement des 20 comptes ayant le plus twitté&lt;/h3&gt;

&lt;p&gt;Ce tableau est intéressant :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+-----------------+------------+---------------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  Nb_tweets &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Nb_Followers &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Compte          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ID         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Date_creation                   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+-----------------+------------+---------------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;3030&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;36&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Dajjalsystem    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3126834263&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sun Mar &lt;span class=&quot;m&quot;&gt;29&lt;/span&gt; 16:24:44 +0000 &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;483&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;840&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ahenjar         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2390165938&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Fri Mar &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; 06:02:44 +0000 &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;437&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1919&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; amilcarhanniba1 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2414559685&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Mar &lt;span class=&quot;m&quot;&gt;27&lt;/span&gt; 15:37:54 +0000 &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;357&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;560&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; AgatheNRV       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21016128&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mon Feb &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; 19:22:40 +0000 &lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;328&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; NataliaGGarcia5 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3409050532&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Aug &lt;span class=&quot;m&quot;&gt;08&lt;/span&gt; 18:47:23 +0000 &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;323&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;926&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; LILTIKKIB       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;407732116&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Tue Nov &lt;span class=&quot;m&quot;&gt;08&lt;/span&gt; 13:22:29 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;322&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;130&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; yanisssou       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;117523080&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Feb &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:42:53 +0000 &lt;span class=&quot;m&quot;&gt;2010&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;312&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;369&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; mouadibun       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2402247031&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Fri Mar &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt; 22:37:25 +0000 &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;279&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mrelguevara     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;266072395&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mon Mar &lt;span class=&quot;m&quot;&gt;14&lt;/span&gt; 16:11:00 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;260&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4502&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; blabalade       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;244170872&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Fri Jan &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt; 17:37:02 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;235&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1002&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fredussart      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2864427501&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Nov &lt;span class=&quot;m&quot;&gt;06&lt;/span&gt; 20:46:09 +0000 &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;228&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;539&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; RafikBiff       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;282921586&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Apr &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; 06:24:28 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;217&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1344&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; opFethi         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1350411432&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Apr &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; 22:53:43 +0000 &lt;span class=&quot;m&quot;&gt;2013&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;198&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2206&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; BenLevyCohen    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;194045521&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Sep &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 09:02:08 +0000 &lt;span class=&quot;m&quot;&gt;2010&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;193&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4938&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; FinDesTemps     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;736880372&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat Aug &lt;span class=&quot;m&quot;&gt;04&lt;/span&gt; 15:03:52 +0000 &lt;span class=&quot;m&quot;&gt;2012&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;188&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; GozoGazi        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3243703193&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Sat May &lt;span class=&quot;m&quot;&gt;09&lt;/span&gt; 17:18:15 +0000 &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;179&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1194&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mars1300        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;573709142&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mon May &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; 15:00:56 +0000 &lt;span class=&quot;m&quot;&gt;2012&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;178&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4257&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Aevalillith     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;242492168&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Mon Jan &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt; 22:30:44 +0000 &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;155&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;216&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Giiorgio100     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2271358198&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Thu Jan &lt;span class=&quot;m&quot;&gt;09&lt;/span&gt; 18:47:01 +0000 &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;151&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;637&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; julievalles     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;618927738&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Tue Jun &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt; 07:52:22 +0000 &lt;span class=&quot;m&quot;&gt;2012&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;------------+--------------+-----------------+------------+---------------------------------&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;il n&amp;#39;y a aucun compte connu ou réputé influent&lt;/li&gt;
&lt;li&gt;la majorité des comptes possède relativement peu de followers mais ils sont particulièrement volubiles&lt;/li&gt;
&lt;li&gt;en particulier, le compte &lt;code&gt;Dajjalsystem&lt;/code&gt; intrigue par le nombre de tweets et RT (&lt;code&gt;3 030&lt;/code&gt;) au regard de son très faible nombre d&amp;#39;abonnés (&lt;code&gt;36&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le qualificatif de &lt;em&gt;&amp;quot;compte pour crier&amp;quot;&lt;/em&gt; utilisée par Nicolas dans son article prend là tout son sens.&lt;/p&gt;

&lt;p&gt;L&amp;#39;API Twitter &lt;code&gt;followers/ids&lt;/code&gt; est très utile pour reconstituer le réseau de relations de ces petits comptes avec les comptes d&amp;#39;activistes patentés.&lt;/p&gt;

&lt;p&gt;Dans leur immense majorité, les comptes les plus volubiles sont liés à l&amp;#39;un des comptes ouvertement pro palestiniens :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Dajjalsystem        Linformatrice, Campagnebds, Alkanz, ybenderbal
ahenjar             KarimaB_, YASMINAREBEL, MadjidFalastine, Linformatrice, Campagnebds, Alkanz, pauldraszen, s_assbague
amilcarhanniba1     Campagnebds, ybenderbal, Barakacity
AgatheNRV           YASMINAREBEL, MadjidFalastine, Campagnebds, Alkanz, ybenderbal, pauldraszen, s_assbague
NataliaGGarcia5     Campagnebds
LILTIKKIB           KarimaB_, keyzer_usual, Linformatrice, oxymorus, Campagnebds, Alkanz, ybenderbal, Barakacity, s_assbague
yanisssou           KarimaB_, MadjidFalastine, Linformatrice, Campagnebds, Alkanz, ybenderbal, Barakacity, pauldraszen, s_assbague
mouadibun           YASMINAREBEL, keyzer_usual, MadjidFalastine, Linformatrice, oxymorus, Campagnebds, Alkanz, Barakacity, pauldraszen, s_assbague
Mrelguevara
blabalade           Campagnebds
fredussart          jeremo12
RafikBiff           KarimaB_, Linformatrice, Campagnebds, Alkanz, ybenderbal, Barakacity
opFethi             KarimaB_, keyzer_usual, MadjidFalastine, Linformatrice, Alkanz, ybenderbal
BenLevyCohen        jeremo12
FinDesTemps 
GozoGazi            KarimaB_, oxymorus
Mars1300    
Aevalillith         KarimaB_, MadjidFalastine, Linformatrice, Campagnebds, Alkanz, ybenderbal, Barakacity, pauldraszen, s_assbague
Giiorgio100         jeremo12
julievalles         KarimaB_, MadjidFalastine, ybenderbal, pauldraszen, s_assbague&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En définitive, cette polémique est une &lt;strong&gt;tempête dans un verre d&amp;#39;eau&lt;/strong&gt; qui n&amp;#39;aurait jamais dû sortir des réseaux sociaux ni des cercles militants.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Aug 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/datascience/unix/bigdata/2015/08/14/analyse-hashtag-telavivsurseine.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/datascience/unix/bigdata/2015/08/14/analyse-hashtag-telavivsurseine.html</guid>
        
        <category>regular</category>
        
        
        <category>datascience</category>
        
        <category>unix</category>
        
        <category>bigdata</category>
        
      </item>
    
      <item>
        <title>La science des données vue d&#39;un unixien</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://coulmont.com/bac/nuage.html&quot;&gt;Baptiste Coulmont&lt;/a&gt;, un universitaire spécialiste de la sociologie des prénoms, diffuse chaque année le classement des prénoms de candidats ayant obtenu une mention &lt;em&gt;Très Bien&lt;/em&gt; au baccalauréat. Comme pour les années précédentes, ses résultats mettent en évidence une forme de déterminisme social où &lt;strong&gt;Apolline&lt;/strong&gt;, par exemple, est beaucoup plus susceptible d’obtenir une mention que &lt;strong&gt;Jordan&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lemonde.fr/bac-lycee/article/2015/07/10/du-prenom-a-la-mention-au-bac-des-determinismes-sociaux-toujours-puissants_4678806_4401499.html&quot;&gt;La médiatisation de ces travaux&lt;/a&gt; a suscité ma curiosité. En bon Unixien, je me suis adonné à la pratique de la &lt;strong&gt;science des données&lt;/strong&gt; (&lt;em&gt;data science&lt;/em&gt;) en ligne de commande, en prenant pour objet d’étude les résultats du brevet des collèges 2015 (série générale).&lt;/p&gt;

&lt;p&gt;Sur le plan de l’analyse sociologique, j’aboutis aux mêmes conclusions que Baptiste Coulmont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adèle&lt;/strong&gt;, &lt;strong&gt;Apolline&lt;/strong&gt;, &lt;strong&gt;Alix&lt;/strong&gt;, &lt;strong&gt;Louise&lt;/strong&gt; (entre autres) sont sur-représentées chez les détenteurs (détentrices devrais-je écrire) de la mention &lt;em&gt;Très Bien&lt;/em&gt; au brevet des collèges alors que &lt;strong&gt;Steven&lt;/strong&gt;, &lt;strong&gt;Alan&lt;/strong&gt;, &lt;strong&gt;Dylan&lt;/strong&gt;, &lt;strong&gt;Jordan&lt;/strong&gt; ou &lt;strong&gt;Bryan&lt;/strong&gt; sont les moins bien représentés&lt;/li&gt;
&lt;li&gt;par ailleurs, les filles obtiennent de bien meilleurs résultats scolaires que les garçons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La représentation visuelle du nuage des prénoms est réalisée avec &lt;strong&gt;GNU Plot&lt;/strong&gt;, avec le pourcentage des mentions TB en abscisse et le nombre d’élèves en ordonnée (cliquer sur l’image pour l’agrandir).
&lt;center&gt;&lt;a href=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/07/brevet-mentions-2015.png&quot;&gt;&lt;img width=&quot;60%&quot; src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/07/brevet-mentions-2015.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Dans cet article, je décrirai chacune des étapes m’ayant permis d’établir ce résultat, en usant abondamment de la &lt;strong&gt;ligne de commande&lt;/strong&gt;.&lt;br/&gt;A travers cet article, j’espère pouvoir faire la démonstration qu’un Unixien est aussi un &lt;em&gt;Data Scientist&lt;/em&gt; qui s’ignore.&lt;/p&gt;

&lt;p&gt;L’ensemble du code dont il est fait référence dans l’article est disponible dans &lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions&quot;&gt;mon dépôt GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Plan de l&amp;#39;article :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Méthodologie et outils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Création du cluster EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Le script d’extraction des données&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Distribution des traitements avec GNU Parallel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Consolidation et visualisation des résultats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt;Méthodologie et outils&lt;/h2&gt;

&lt;p&gt;Le site &lt;a href=&quot;http://www.francetvinfo.fr/&quot;&gt;FranceTV info&lt;/a&gt; publie les &lt;a href=&quot;http://www.francetvinfo.fr/brevet&quot;&gt;résultats du brevet des collèges&lt;/a&gt; par commune, mais il ne s’agit que d’une publication partielle. Néanmoins, le site permet de constituer un échantillon significatif de plus de 250 000 résultats.&lt;br /&gt;
La méthode utilisée suit les étapes suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Extraction des données&lt;/strong&gt; : comme on peut s’en douter, aucun fichier formaté n’est mis à disposition. J’ai donc utilisé la technique du &lt;em&gt;harvesting&lt;/em&gt; (ou &lt;em&gt;web scraping&lt;/em&gt;) consistant à extraire le contenu du site, suivi d’un formatage afin de faciliter son exploitation ultérieure.
&lt;br/&gt;Techniquement, c’est un script développé en &lt;strong&gt;Python&lt;/strong&gt; qui est chargé de l’extraction. Il s’appuie sur l’excellente librairie &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;&lt;strong&gt;BeautifulSoup&lt;/strong&gt;&lt;/a&gt; dont j’ai déjà vanté les qualités dans un précédent article.&lt;br /&gt;
Le script d’extraction est conçu pour être &lt;strong&gt;parallélisable&lt;/strong&gt;, sans quoi la durée du traitement serait au bas mot d’une journée sur une machine de série. Il n’extrait que les résultats des collèges d’une commune dont l’identifiant est passé en paramètre.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallélisation des traitements&lt;/strong&gt; : les traitements d’extraction et d’analyse des données sont distribués via &lt;a href=&quot;http://www.gnu.org/software/parallel/&quot;&gt;&lt;strong&gt;GNU Parallel&lt;/strong&gt;&lt;/a&gt; sur un &lt;strong&gt;cluster Amazon EC2&lt;/strong&gt; constitué de &lt;strong&gt;10 instances&lt;/strong&gt; &lt;code&gt;t2.micro&lt;/code&gt; (1 CPU 3,3 Ghz / 1 Go RAM) sous Ubuntu. La parallélisation est orchestrée depuis un portable sous OS X.
Le schéma ci-dessous décrit l’architecture de l’ensemble :
&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/07/architecture.png&quot; alt=&quot;Nuage des prénoms&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agrégation des données&lt;/strong&gt; : la consolidation des données issue des traitements réalisés par le cluster est effectuée sur un portable (sous OS X) à l’aide des outils de tout bon Unixien (&lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;paste&lt;/code&gt;, &lt;code&gt;bc&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;uniq&lt;/code&gt;, etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visualisation&lt;/strong&gt; : pour faciliter l’interprétation des résultats, la visualisation des données est effectuée avec &lt;code&gt;gnuplot&lt;/code&gt; sur un portable (sous OS X)
## &lt;a name=&quot;2&quot;&gt;&lt;/a&gt;Création du cluster EC2
Il faut disposer d’un compte AWS (Amazon Web Services). Pour information, Amazon propose de tester (quasi) &lt;a href=&quot;http://aws.amazon.com/fr/free/&quot;&gt;gratuitement ses services&lt;/a&gt; pendant 12 mois à hauteur de 750 heures de consommation mensuelle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une fois votre compte créé, installer &lt;code&gt;awscli&lt;/code&gt;, le client en ligne de commande de l’API AWS ainsi que l’utilitaire &lt;code&gt;jq&lt;/code&gt;, un véritable couteau suisse de JSON. Ce dernier nous sera très utile car la sortie standard du client &lt;code&gt;awscli&lt;/code&gt; est au format JSON :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;pip install awscli
brew install jq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configurer votre client &lt;code&gt;awscli&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;aws configure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Plutôt que d’utiliser directement le client &lt;code&gt;aws&lt;/code&gt;, &lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/tree/master/ec2&quot;&gt;je mets à disposition&lt;/a&gt; un ensemble de scripts Shell prêts à l’emploi permettant de mettre en place le cluster EC2 depuis une invite de commande sur un simple portable :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aws-ec2-create_key_pair.sh&lt;/code&gt; : créer une paire de clés asymétriques&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws-ec2-create_security_group.sh&lt;/code&gt; : créer un groupe de sécurité&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws-ec2-run_instances.sh&lt;/code&gt; : créer un nombre prédéfini d’instances EC2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws-ec2-config_ssh.sh&lt;/code&gt; : mettre à jour la config SSH locale pour accéder aux instances EC2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws-ec2-get_public_ips.sh&lt;/code&gt; : afficher la liste des IP publiques de toutes les instances EC2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour récupérer les scripts localement, utiliser les commandes :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/ksahnine/datascience-brevet-mentions.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;datascience-brevet-mentions/ec2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Effectuons pas à pas toutes les opérations de construction du cluster depuis un ordinateur de contrôle (le laptop du schéma ci-dessus) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;créer une paire de clé asymétriques dont le nom est passé en paramètre (&lt;code&gt;inovia-kp&lt;/code&gt; dans notre cas) : &lt;br/&gt;&lt;code&gt;
./aws-ec2-create_key_pair.sh inovia-kp
&lt;/code&gt; &lt;br/&gt;Le script sauvegarde la &lt;strong&gt;clé privée&lt;/strong&gt; dans le fichier &lt;code&gt;~/.ssh/inovia-kp.pem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;créer un groupe de sécurité dont le nom est passé en paramètre (&lt;code&gt;inovia-sg&lt;/code&gt; dans notre cas) :&lt;br /&gt;&lt;code&gt;
./aws-ec2-create_security_group.sh inovia-sg
&lt;/code&gt; &lt;br /&gt;Le script rajoute une &lt;strong&gt;règle d’accès par SSH&lt;/strong&gt; mais restreint à l’adresse IP publique de votre ordinateur si vous êtes derrière un routeur.&lt;/li&gt;
&lt;li&gt;créer et démarrer 10 instances EC2 de type &lt;code&gt;t2.micro&lt;/code&gt; :&lt;br /&gt;&lt;code&gt;
./aws-ec2-run_instances.sh inovia-kp inovia-sg 10&lt;/code&gt;&lt;br /&gt;Les noms de clé asymétrique et de groupe de sécurité créés ci-dessus sont passés en paramètre.&lt;/li&gt;
&lt;li&gt;configurer le fichier &lt;code&gt;~/.ssh/config&lt;/code&gt; pour chacune des instances EC2 :&lt;br /&gt;&lt;code&gt;
./aws-ec2-config_ssh.sh inovia-kp
&lt;/code&gt; &lt;br /&gt;Ce script configure automatiquement le fichier &lt;code&gt;~/.ssh/config&lt;/code&gt; pour toutes les instances EC2 du cluster, et dont voici un extrait :
&lt;pre&gt;
Host 52.11.189.180
IdentityFile ~/.ssh/inovia-kp.pem
User ubuntu
StrictHostKeyChecking no
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;pour afficher toutes les adresses IP publiques des instances EC2, exécuter le script &lt;code&gt;./aws-ec2-get_public_ips.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A ce stade, vous pouvez accéder à n’importe quelle instance EC2 par SSH sans avoir besoin de saisir un mot de passe. Ex : &lt;code&gt;ssh ubuntu@52.11.189.180&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;3&quot;&gt;&lt;/a&gt;Le script d&amp;#39;extraction des données&lt;/h2&gt;

&lt;p&gt;Développé en Python, il utilise la technique du &lt;em&gt;harvesting&lt;/em&gt; via la librairie &lt;strong&gt;BeautifulSoup&lt;/strong&gt; installable comme suit :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sous Mac OS X : &lt;code&gt;sudo pip install beautifulsoup4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sous Ubuntu : &lt;code&gt;sudo apt-get install python-bs4&lt;/code&gt; (ou via &lt;code&gt;pip&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je ne vais pas rentrer dans les détails du développement. Je vous renvoie au &lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/extract_brevet.py&quot;&gt;code source&lt;/a&gt; pour plus de détails.&lt;br/&gt;
Retenez qu’il fonctionne de la manière suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la commande &lt;code&gt;./extract_brevet.py&lt;/code&gt; retourne une liste de triplets (académie, département, commune) dont voici un très court échantillon :
&lt;pre&gt;
bordeaux Pyrenees-Atlantiques bedous
bordeaux Pyrenees-Atlantiques biarritz
bordeaux Pyrenees-Atlantiques bidache
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;la commande &lt;code&gt;./extract_brevet.py -a bordeaux -d Pyrenees-Atlantiques -c biarritz&lt;/code&gt; extrait les résultats obtenus par les candidats de la commune de Biarritz (dans l’académie de Bordeaux). &lt;br /&gt;Le script produit 2 fichiers (un par série) :

&lt;ul&gt;
&lt;li&gt;pour la série générale : &lt;code&gt;output/bordeaux/Pyrenees-Atlantiques/biarritz/Serie-Generale.csv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pour la série professionnelle : &lt;code&gt;output/bordeaux/Pyrenees-Atlantiques/biarritz/Serie-Professionnelle.csv&lt;/code&gt;
&lt;br /&gt;Les données extraites sont au format CSV, dont voici un exemple fictif :
&lt;pre&gt;
bordeaux;Pyrenees-Atlantiques;biarritz;ADMIS;MENTION BIEN;Dupont;Lucie
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;4&quot;&gt;&lt;/a&gt;Distribution des traitements avec GNU Parallel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/parallel/&quot;&gt;&lt;strong&gt;GNU Parallel&lt;/strong&gt;&lt;/a&gt; est un formidable outil en ligne de commande permettant de paralléliser l’exécution de scripts shell sur un système UNIX.
&lt;br /&gt;
La parallélisation peut être &lt;strong&gt;verticale&lt;/strong&gt;, c’est-à-dire exploitant tous les coeurs du processeur, et/ou &lt;strong&gt;horizontale&lt;/strong&gt; en distribuant les traitements sur plusieurs machines, ce qui sera le cas dans cet article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Il n’est pas nécessaire d’installer GNU Parallel sur les machines distantes. Seul un accès SSH suffit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Installation de GNU Parallel&lt;/h3&gt;

&lt;p&gt;Installons GNU Parallel sur le portable de contrôle :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sous Mac OS X : &lt;code&gt;brew install parallel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sous Ubuntu : &lt;code&gt;sudo apt-get install parallel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Installation de BeautifulSoup sur les instances EC2&lt;/h3&gt;

&lt;p&gt;Les instances EC2 sous Ubuntu disposent de l’interpréteur Python mais pas de la librairie &lt;code&gt;BeautifulSoup&lt;/code&gt;.&lt;br /&gt;
Créons le fichier &lt;code&gt;machines&lt;/code&gt; contenant toutes les adresses IP publiques des instances EC2 :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./aws-ec2-get_public_ips.sh &amp;gt; machines&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A l’aide de GNU Parallel, installons &lt;em&gt;BeautifulSoup&lt;/em&gt; à distance sur l’ensemble des instances EC2 :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;parallel --nonall --slf machines &lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo apt-get install python-bs4&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/parallel-install-bs4.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;parallel-install-bs4.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Distribution du traitement d’extraction des données&lt;/h3&gt;

&lt;p&gt;Dans un premier temps, générons le fichier &lt;code&gt;communes.csv&lt;/code&gt; contenant les triplets (académie, dépa    rtement, commune) pour l’ensemble des académies :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./extract_brevet.py &amp;gt; communes.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dans un second temps, lançons les traitements d’extraction répartis sur les instances du cluster par lots de 10 jobs. Ainsi, en rythme de croisière, 100 communes sont traitées simultanément :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;parallel -a communes.csv --colsep &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -j &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; --basefile ac_scrap.py &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         --slf machines &lt;span class=&quot;s2&quot;&gt;&amp;quot;./ac_scrap.py -a {1} -d {2} -c {3} 2&amp;gt; {3}.log&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/parallel-extract-data.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;parallel-extract-data.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On notera que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le flag &lt;code&gt;-a&lt;/code&gt; est suivi du fichier contenant les triplets&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;--basefile&lt;/code&gt; est suivi du nom du script téléversé et exécuté sur chacune des machines distantes&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;--colsep&lt;/code&gt; est suivi du séparateur de champ dans le fichier en entrée (le caractère espace dans notre cas).&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;-j&lt;/code&gt; est suivi du nombre de jobs par machine&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;--slf&lt;/code&gt; est suivi du fichier contenant la liste des adresses IP des machines du cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Distribution du traitement statistique&lt;/h3&gt;

&lt;p&gt;L’extraction étant terminée, mettons au point deux scripts, l’un affichant tous les prénoms des candidats de série générale, l’autre les candidats ayant obtenu une mention très bien :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat get_prenoms_full.sh
find output -type f -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;Serie-Generale.csv&amp;quot;&lt;/span&gt; -exec cat &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s1&quot;&gt;&amp;#39;;&amp;#39;&lt;/span&gt; -f7

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat get_prenoms_meTB.sh
find output -type f -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;Serie-Generale.csv&amp;quot;&lt;/span&gt; -exec cat &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;TRES BIEN&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s1&quot;&gt;&amp;#39;;&amp;#39;&lt;/span&gt; -f7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/get_prenoms_full.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;get_prenoms_full.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/get_prenoms_meTB.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;get_prenoms_meTB.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;
&lt;br/&gt;Distribuons les traitements sur le cluster (&lt;em&gt;map&lt;/em&gt;) et comptabilisons les prénoms (&lt;em&gt;reduce&lt;/em&gt;), triés par ordre alphabétique :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;de tous les candidats :&lt;br /&gt;&lt;pre&gt;
parallel --nonall --basefile get&lt;em&gt;prenoms&lt;/em&gt;full.sh --slf machines \
         --pipe &amp;quot;./get_prenoms_full.sh&amp;quot; | sort | uniq -c | \
         sort -k2 &amp;gt; stats_brevet_full.csv
&lt;/pre&gt;
&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/parallel-get_prenoms_full.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;parallel-get_prenoms_full.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;des candidats ayant obtenu une mention TB :&lt;br /&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;parallel --nonall --basefile get&lt;span class=&quot;se&quot;&gt;_&lt;/span&gt;prenoms&lt;span class=&quot;se&quot;&gt;_&lt;/span&gt;meTB.sh --slf machines &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         --pipe &lt;span class=&quot;s2&quot;&gt;&amp;quot;./get_prenoms_meTB.sh&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         sort -k2 &amp;gt; stats&lt;span class=&quot;se&quot;&gt;_&lt;/span&gt;brevet&lt;span class=&quot;se&quot;&gt;_&lt;/span&gt;meTB.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/parallel-get_prenoms_meTB.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;parallel-get_prenoms_meTB.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Le format des fichiers générés est du type :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[...]
   1 Hormoz
  69 Hortense
   2 Hosanna
   1 Hosni
[...]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;a name=&quot;5&quot;&gt;&lt;/a&gt;Consolidation et visualisation des résultats&lt;/h2&gt;

&lt;p&gt;Utilisons la commande &lt;code&gt;join&lt;/code&gt; pour assembler les fichiers &lt;code&gt;stats_brevet_full.csv&lt;/code&gt; et &lt;code&gt;stats_brevet_meTB.csv&lt;/code&gt; de façon à obtenir, pour chaque prénom, le nombre total d’occurrences et le nombre de mentions TB :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;join -1 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; -2 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; stats_brevet_full.csv stats_brevet_meTB.csv &amp;gt; brevet-mentions-2015.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le fichier produit ressemble à ceci :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[…]
Hortense 24 69
Houda 1 11
Houdaifa 1 2
Housni 1 2
[…]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ainsi, sur 69 candidats prénommés Hortense, 24 ont eu une mention TB.&lt;/p&gt;

&lt;p&gt;Nous y sommes presque. Rajoutons pour chaque enregistrement ayant plus de 190 candidats, le pourcentage ayant obtenu une mention TB :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;join -1 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; -2 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; stats_brevet_meTB.csv stats_brevet_full.csv &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
       awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;$3 &amp;gt; 190 { printf(&amp;quot;%s %d %d %2.1f\n&amp;quot;, $1, $2, $3, ($2/$3)*100) }&amp;#39;&lt;/span&gt; &amp;gt; brevet-mentions-2015.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/reduce-join_results.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;reduce-join_results.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voici un extrait du fichier `brevet-mentions-2015.csv où l’on relève que 16,3 % des prénommées Amandine ont obtenu une mention TB :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[…]
Allan 12 228 5,3
Amandine 144 884 16,3
Ambre 79 403 19,6
[…]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enfin, visualisons le résultat final avec &lt;strong&gt;GNU Plot&lt;/strong&gt; sous la forme d’un nuage de prénoms où le nombre de candidats est représenté en ordonnée et le pourcentage de mention TB en abscisse :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;gnuplot &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;plot &amp;quot;brevet-mentions-2015.csv&amp;quot; u 4:3:1 w labels rotate by 20 font &amp;quot;Helvetica,8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ksahnine/datascience-brevet-mentions/blob/master/app/dataviz-results.sh&quot;&gt;&lt;sub&gt;&lt;sup&gt;Source : &lt;code&gt;dataviz-results.sh&lt;/code&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/07/brevet-mentions-2015.png&quot;&gt;&lt;img width=&quot;60%&quot; src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/07/brevet-mentions-2015.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/datascience/cloudcomputing/bigdata/2015/07/21/science-donnees-unixien.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/datascience/cloudcomputing/bigdata/2015/07/21/science-donnees-unixien.html</guid>
        
        <category>regular</category>
        
        
        <category>datascience</category>
        
        <category>cloudcomputing</category>
        
        <category>bigdata</category>
        
      </item>
    
      <item>
        <title>Construire un réseau de conteneurs Docker avec Weave</title>
        <description>&lt;p&gt;Dans un précédent billet, j’avais évoqué la difficulté de construire un &lt;strong&gt;réseau de conteneurs Docker&lt;/strong&gt; répartis sur plusieurs machines hôtes, l’interconnexion de 2 conteneurs n’étant possible qu’au sein d’un même hôte Docker.&lt;br /&gt;
L’autre limitation est la &lt;strong&gt;difficulté d’accéder, via un port unique&lt;/strong&gt;, à 2 ou plusieurs conteneurs co-localisés dans le même hôte (par exemple, 2 serveurs web dockerisés dans le même hôte et écoutant tous deux sur le port 80).&lt;br /&gt;
Ces lacunes sont comblées par des solutions diverses, en compétition les unes avec les autres, les plus connues étant :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weave.works/&quot;&gt;&lt;strong&gt;Weave&lt;/strong&gt;&lt;/a&gt;, objet de ce billet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SocketPlane&lt;/strong&gt;, racheté par Docker pour former le futur &lt;a href=&quot;http://blog.docker.com/2015/06/networking-receives-an-upgrade/&quot;&gt;&lt;strong&gt;Docker Network&lt;/strong&gt;&lt;/a&gt; (&lt;em&gt;libnetwork&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openvswitch.org/&quot;&gt;&lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Avant d’entrer dans le vif du sujet, rappelons deux annonces importantes de l’édition DockerCon 2015, la conférence annuelle organisée par Docker :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.docker.com/2015/06/networking-receives-an-upgrade/&quot;&gt;&lt;strong&gt;Docker Network&lt;/strong&gt;&lt;/a&gt;, annoncée pour la version 1.7, est issu en partie de l’intégration de &lt;em&gt;SocketPlane&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.docker.com/2015/06/extending-docker-with-plugins/&quot;&gt;&lt;strong&gt;Docker Plugin&lt;/strong&gt;&lt;/a&gt; est un mécanisme permettant d’étendre les fonctionnalités de &lt;em&gt;Docker Engine&lt;/em&gt; sous la forme de modules d’extension
&lt;em&gt;Docker Network&lt;/em&gt; a été conçu selon le principe &lt;em&gt;&amp;quot;Batteries included, but removable&amp;quot;&lt;/em&gt; ouvrant la voie au développement de drivers réseau par des sociétés tierces sous la forme de plugins, ce qui est &lt;a href=&quot;https://github.com/weaveworks/docker-plugin/&quot;&gt;&lt;em&gt;déjà le cas de Weave&lt;/em&gt;&lt;/a&gt;.&lt;br /&gt;
Avec &lt;em&gt;Docker Network&lt;/em&gt;, nous disposerons donc d’une &lt;strong&gt;interface standardisée de gestion d’un réseau de conteneurs&lt;/strong&gt;, à l’image de &lt;em&gt;Docker Machine&lt;/em&gt; pour le provisionnement d’hôtes Docker. J’y reviendrai dans un prochain billet. Fin de la longue parenthèse.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dans ce billet, nous explorerons en détail le fonctionnement et la mise en oeuvre de Weave à travers un cas pratique.&lt;/p&gt;

&lt;h2&gt;De l&amp;#39;intérêt de Weave&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Weave&lt;/strong&gt; permet d’interconnecter des conteneurs répartis sur plusieurs hôtes Docker, indépendamment de leur localisation physique, afin de constituer un &lt;strong&gt;réseau virtuel de conteneurs&lt;/strong&gt;.&lt;br /&gt;
La disponibilité d’un mécanisme de &lt;strong&gt;découverte de service par DNS&lt;/strong&gt; parachève un dispositif adapté à la construction d’une &lt;strong&gt;architecture de microservices&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Fonctionnement&lt;/h2&gt;

&lt;p&gt;Un réseau Weave est constitué de &lt;strong&gt;routeurs virtuels&lt;/strong&gt; installés sur chacun des hôtes Docker et connectés entre eux en pair à pair.&lt;br /&gt;
Les routeurs sont en fait des conteneurs Docker maintenant entre eux une connexion TCP pour échanger des informations sur la topologie du réseau ainsi que des connexions UDP pour acheminer le trafic inter-conteneur.&lt;br /&gt;
Lorsque qu’un conteneur rejoint le réseau Weave, il est relié au routeur à travers une interface réseau virtuelle (bridge &lt;code&gt;weave&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;Etude de cas&lt;/h2&gt;

&lt;p&gt;Le schéma ci-dessous décrit l’architecture constituée de 2 serveurs hébergeant chacun un hôte Docker et un routeur Weave.
&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/06/weave-usecase.png&quot; alt=&quot;Architecture&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Deux services dockerisés (&lt;code&gt;svc1&lt;/code&gt;, &lt;code&gt;svc2&lt;/code&gt;) sont déployés sur l’hôte &lt;code&gt;orion.local&lt;/code&gt; (sous Ubuntu), tandis que le service &lt;code&gt;svc3&lt;/code&gt; est déployé sur l’hôte &lt;code&gt;macbook.local&lt;/code&gt; (sous &lt;em&gt;Boot2Docker&lt;/em&gt;).&lt;br /&gt;
Les services dockerisés sont issus de l’image &lt;code&gt;ksahnine/dummy-http&lt;/code&gt;, un service REST HTTP de test écoutant par défaut sur le port &lt;code&gt;8080&lt;/code&gt; et utilisable comme suit :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;création du conteneur :
&lt;pre&gt;
$ docker run -td -p 8080:8080 ksahnine/dummy-http svcN
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;appel du service dockerisé :
&lt;pre&gt;
$ curl http://host&lt;em&gt;ip:8080/
Hi! I&amp;#39;m [svcN] service and my Docker container&amp;#39;s IP is [container&lt;/em&gt;ip]
&lt;/pre&gt;
Notez sur le schéma le &lt;strong&gt;plan d’adressage&lt;/strong&gt; des conteneurs dans le réseau weave (&lt;code&gt;10.0.1.x/24&lt;/code&gt;). Les adresses IP sont attribuées à la création des conteneurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Weave est distribué sous la forme d’images Docker, dont la disponibilité est évidemment un préalable.&lt;br /&gt;
L’utilisation des composants dockerisés de Weave (routeur, DNS, proxy) est encapsulé par un script shell faisant office d’interface CLI (&lt;code&gt;weave&lt;/code&gt;) installé sur chaque hôte Docker.&lt;/p&gt;

&lt;h3&gt;Sous Ubuntu / CentOS&lt;/h3&gt;

&lt;p&gt;Le mode opératoire d’installation est le suivant :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo wget -O /usr/local/bin/weave https://github.com/weaveworks/weave/releases/download/latest_release/weave
sudo chmod a+x /usr/local/bin/weave&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Sous Boot2Docker (Windows / MacOS)&lt;/h3&gt;

&lt;p&gt;Le mode opératoire d’installation est le suivant :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://github.com/weaveworks/weave/releases/download/latest_release/weave
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker up
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker ssh &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat &amp;gt; /usr/local/bin/weave&amp;quot;&lt;/span&gt; &amp;lt; weave
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker ssh &lt;span class=&quot;s2&quot;&gt;&amp;quot;chmod a+x /usr/local/bin/weave&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Démarrage des routeurs Weave&lt;/h2&gt;

&lt;p&gt;Démarrer le routeur Weave sur chacun des noeuds (&lt;code&gt;orion.local&lt;/code&gt; et &lt;code&gt;macbook.local&lt;/code&gt;) via la commande &lt;code&gt;weave launch&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo weave launch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour relier les 2 routeurs, connectons-nous sur l’un des noeuds, par exemple &lt;code&gt;orion.local&lt;/code&gt;, et utilisons la commande &lt;code&gt;weave connect&lt;/code&gt; suivie de l’adresse IP publique (sur le réseau physique) du second noeud :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;orion.local:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo weave connect 192.168.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; La commande &lt;code&gt;weave status&lt;/code&gt; permet de connaître l’état du routeur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Déploiement des services dockerisés sur le réseau Weave&lt;/h2&gt;

&lt;p&gt;La commande &lt;code&gt;weave run&lt;/code&gt; permet de démarrer un conteneur et de le relier au réseau Weave. Elle est immédiatement suivie de l’adresse IP assignée sur le réseau virtuel :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sur &lt;code&gt;orion.local&lt;/code&gt; :
&lt;pre&gt;
orion.local:~$ sudo weave run 10.0.1.1/24 ksahnine/dummy-http svc1
orion.local:~$ sudo weave run 10.0.1.2/24 ksahnine/dummy-http svc2
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;sur &lt;code&gt;macbook.local&lt;/code&gt; :
&lt;pre&gt;
macbook.local:~$ sudo weave run 10.0.1.3/24 ksahnine/dummy-http svc3
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; La commande &lt;code&gt;weave run&lt;/code&gt; démarre le conteneur en mode détaché (en tâche de fond). Par ailleurs, les ports exposés par le conteneur sont par défaut accessibles à l’extérieur du conteneur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Accéder aux services dockerisés&lt;/h2&gt;

&lt;p&gt;A ce stade, le réseau de conteneurs est opérationnel. Voyons comment invoquer les services dockerisés de l’hôte &lt;code&gt;orion.local&lt;/code&gt; depuis un conteneur localisé sur &lt;code&gt;macbook.local&lt;/code&gt;.&lt;br /&gt;
Pour la démonstration, créons un nouveau conteneur issu de l’image Docker &lt;code&gt;tutum/curl&lt;/code&gt; de l’hébergeur &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt; sur &lt;code&gt;macbook.local&lt;/code&gt; et relié au réseau Weave :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;macbook.local:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo weave run 10.0.1.4/24 -ti tutum/curl /bin/bash
04d37c6f7781a7046c646999eae43a69d5d51c2114b2d87cf8e10ab033721e63&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Accédons à la console du conteneur :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;macbook.local:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo docker attach 04d37c6f7781&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Penser à taper sur la touche &lt;code&gt;Enter&lt;/code&gt; pour avoir le prompt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Appelons les 3 services via cURL :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@04d37c6f7781:/# curl 10.0.1.1:8080
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc1] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.6&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
root@04d37c6f7781:/# curl 10.0.1.2:8080
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc2] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.7&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
root@04d37c6f7781:/# curl 10.0.1.3:8080
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc3] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.20&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Plusieurs remarques :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;notez que les 2 services &lt;code&gt;svc1&lt;/code&gt; et &lt;code&gt;svc2&lt;/code&gt;, co-localisés sur le même hôte Docker, sont accessibles à travers le même port ! (&lt;code&gt;8080&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;l’adresse IP retournée par le service (&lt;code&gt;172.17.0.x&lt;/code&gt;) est celle de l’interface veth reliée au bridge &lt;code&gt;docker0&lt;/code&gt;. Chaque conteneur a donc 2 interfaces réseaux :

&lt;ul&gt;
&lt;li&gt;l’une reliée au sous-réseau créé par Docker et partagé entre l’hôte et ses conteneurs&lt;/li&gt;
&lt;li&gt;l’autre reliée au réseau virtuel Weave :&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@04d37c6f7781:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:15
          inet addr:172.17.0.21  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:15/64 Scope:Link
          UP BROADCAST RUNNING  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:648 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;648.0 B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  TX bytes:648 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;648.0 B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

ethwe     Link encap:Ethernet  HWaddr 32:0f:05:02:d7:1e
          inet addr:10.0.1.4  Bcast:0.0.0.0  Mask:255.255.255.0
          inet6 addr: fe80::300f:5ff:fe02:d71e/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:65535  Metric:1
          RX packets:31 errors:0 dropped:0 overruns:0 frame:0
          TX packets:32 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:2674 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.6 KB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  TX bytes:2391 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.3 KB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;il devrait être possible de remplacer le bridge &lt;code&gt;docker0&lt;/code&gt; par le bridge weave via l’option &lt;code&gt;--bridge&lt;/code&gt; du démon Docker, mais je n’ai pas encore testé. Voir la documentation de Docker : &lt;a href=&quot;https://docs.docker.com/articles/networking/#bridge-building&quot;&gt;Advanced networking&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Simplifier le déploiement avec Weave Proxy&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Weave Proxy&lt;/strong&gt; est un conteneur Docker interceptant toutes les commandes émises par le client Docker vers le démon Docker.&lt;br /&gt;
Il permet d’utiliser directement la commande &lt;code&gt;docker run&lt;/code&gt; pour &lt;strong&gt;enregistrer automatiquement&lt;/strong&gt; un conteneur sur le réseau Weave ou dans un DNS comme on le verra dans le paragraphe suivant.&lt;br /&gt;
Sur chaque noeud :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lancer le routeur et le proxy Weave :
&lt;pre&gt;
# weave launch &amp;amp;&amp;amp; weave launch-proxy
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; le cas échéant, utiliser la commande &lt;code&gt;weave reset&lt;/code&gt; pour réinitialiser le routeur Weave.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;configurer le client Docker pour le faire pointer vers Weave Proxy :
&lt;pre&gt;
# `weave proxy-env`
&lt;/pre&gt;
ce qui est équivalent à :
&lt;pre&gt;
# export DOCKER_HOST=tcp://127.0.0.1:12375
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Créons un conteneur et assignons lui une adresse IP spécifique sur le réseau Weave :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run --rm -e &lt;span class=&quot;nv&quot;&gt;WEAVE_CIDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.0.1.4/24 -ti tutum/curl /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le support d’&lt;a href=&quot;https://en.wikipedia.org/wiki/IP_address_management&quot;&gt;IPAM&lt;/a&gt; permet d’assigner automatique d’une adresse IP au conteneur. Il suffit d’omettre la variable d’environnement &lt;code&gt;WEAVE_CIDR&lt;/code&gt;, soit :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run --rm -ti tutum/curl /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La plage d’adresse IP peut être redéfinie au lancement du routeur via l’option &lt;code&gt;-iprange&lt;/code&gt;, par ex: &lt;code&gt;weave launch -iprange 10.2.3.0/24&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Découverte de services par DNS&lt;/h2&gt;

&lt;p&gt;En combinant le routeur Weave, le proxy Weave et le DNS Weave, il est aisé de mettre en oeuvre une &lt;strong&gt;solution de découverte de service&lt;/strong&gt; totalement dynamique.&lt;br /&gt;
Pour ce faire, il suffit d’activer les 3 composants Weave sur chaque noeud :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lancer le routeur, le DNS et le proxy Weave :
&lt;pre&gt;
# weave launch &amp;amp;&amp;amp; weave launch-dns &amp;amp;&amp;amp; weave launch-proxy
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;configurer le client Docker pour le faire pointer vers le proxy Weave :
&lt;pre&gt;
# `weave proxy-env`
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Déployons le service &lt;code&gt;svc1&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;orion.local:~# docker run -d --name svc1 ksahnine/dummy-http svc1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; le paramètre &lt;code&gt;--name&lt;/code&gt; est utilisé pour enregistrer le service dans le DNS. Ainsi, son nom pleinement qualifié sera &lt;code&gt;svc1.weave.local&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Créons un nouveau conteneur issu de l’image Docker &lt;code&gt;tutum/curl&lt;/code&gt; de l’hébergeur &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt; sur &lt;code&gt;macbook.local&lt;/code&gt; et relié au réseau Weave :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;orion.local:~# docker run --rm -ti tutum/curl /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enfin, vérifions que le service est accessible sous son nom pleinement qualifié (&lt;code&gt;svc1.weave.local&lt;/code&gt;) :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@8f73b6902ee2:/# curl svc1.weave.local:8080
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc1] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.21&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Noter que l’architecture est &lt;strong&gt;scalable horizontalement&lt;/strong&gt; en déployant le service &lt;code&gt;svc1&lt;/code&gt; sur plusieurs hôtes Docker et ce, sans répartiteur de charge ou reverse-proxy.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/docker/architecture/microservice/2015/06/25/reseau-docker-weave.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/docker/architecture/microservice/2015/06/25/reseau-docker-weave.html</guid>
        
        <category>regular</category>
        
        
        <category>docker</category>
        
        <category>architecture</category>
        
        <category>microservice</category>
        
      </item>
    
      <item>
        <title>Docker Remote API : piloter un hôte Docker à distance</title>
        <description>&lt;p&gt;Parmi toutes les fonctionnalités disponibles, il en est une qui explique pour beaucoup le dynamisme phénoménal de l’écosystème Docker. Il s’agit de &lt;a href=&quot;https://docs.docker.com/reference/api/docker_remote_api/&quot;&gt;&lt;strong&gt;Docker Remote API&lt;/strong&gt;&lt;/a&gt;, une &lt;strong&gt;API REST&lt;/strong&gt; extrêmement bien conçue exposant toutes les fonctionnalités du moteur Docker et permettant ainsi de piloter un hôte Docker depuis une machine ou une application distante.&lt;/p&gt;

&lt;p&gt;Toutes les solutions d’orchestration de conteneurs Docker utilisent directement ou indirectement l’API Docker Remote, raison pour laquelle je vous propose d’y jeter un oeil attentif.&lt;/p&gt;

&lt;p&gt;Dans cet article, nous verrons :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comment fonctionne l’interaction avec le &lt;strong&gt;démon Docker&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;comment activer &lt;strong&gt;Docker Remote API&lt;/strong&gt; avec et sans certificats TLS&lt;/li&gt;
&lt;li&gt;comment utiliser &lt;strong&gt;Docker Machine&lt;/strong&gt; avec un hôte Docker déjà provisionné sur un réseau local d’entreprise&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;La communication avec le démon Docker&lt;/h2&gt;

&lt;p&gt;Le schéma ci-dessous représente l’architecture type d’un serveur Linux (sous Ubuntu) hébergeant un hôte Docker. Le moteur Docker (serveur) est un démon écoutant par défaut sur un &lt;strong&gt;socket UNIX&lt;/strong&gt; (&lt;code&gt;/var/run/docker.sock&lt;/code&gt;).&lt;br /&gt;
Pour mémoire, les sockets UNIX permettent à deux ou plusieurs processus d’échanger des données de façon bi-directionnelle.
&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/05/docker-engine.png&quot; alt=&quot;Hôte Docker&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Ainsi, le client Docker &lt;strong&gt;installé localement&lt;/strong&gt; interagit avec le démon via le socket UNIX &lt;code&gt;/var/run/docker.sock&lt;/code&gt;. Sans surprise, le protocole d’échange utilisé par l’API Docker est de type &lt;strong&gt;REST&lt;/strong&gt; comme nous allons le voir ci-après.&lt;/p&gt;

&lt;p&gt;Exécutons par exemple la commande &lt;code&gt;GET /info&lt;/code&gt;, permettant d’obtenir des informations système de l’hôte Docker.&lt;br /&gt;
Pour ce faire, j’utilise l’utilitaire &lt;a href=&quot;http://netcat.sourceforge.net/&quot;&gt;Netcat&lt;/a&gt; (commande &lt;code&gt;nc&lt;/code&gt;) afin d’envoyer la requête au socket &lt;code&gt;/var/run/docker.sock&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e “GET /info HTTP/1.0rn” &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo nc -U /var/run/docker.sock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voici un extrait de la réponse obtenue :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.0 200 OK
Content-Type: application/json
Job-Name: info
Date: Tue, 12 May 2015 19:56:14 GMT
Content-Length: 889

{”Containers”:118,[…]”Name”:”orion”,”OperatingSystem”:”Ubuntu 14.04.2 LTS”,”RegistryConfig”:
{”IndexConfigs”:{”docker.io”:{”Mirrors”:null,”Name”:”docker.io”,”Official”:true,”Secure”:true}},
“InsecureRegistryCIDRs”:[”127.0.0.0/8″]},”SwapLimit”:0,
“SystemTime”:”2015-05-12T21:56:14.735623265+02:00″}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On remarquera que le corps de la réponse est au format &lt;strong&gt;JSON&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Maintenant, voyons à quoi ressemblerait une combinaison associant :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un hôte Docker avec activation de &lt;em&gt;Docker Remote API&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;un client Docker localisé sur une machine distante
&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/05/docker-engine-remote.png&quot; alt=&quot;Hôte Docker distant&quot;&gt;&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voyons comment activer et utiliser &lt;em&gt;Docker Remote API&lt;/em&gt; avec et sans certificats TLS.&lt;/p&gt;

&lt;h2&gt;Activer Docker Remote API sans certificat TLS&lt;/h2&gt;

&lt;p&gt;Cette configuration n’est pas recommandée en production car la communication entre client et hôte Docker est en clair. Elle est néanmoins fort utile à des fins de test. Voici comment la mettre en oeuvre :&lt;/p&gt;

&lt;p&gt;Côté serveur (&lt;code&gt;orion.local&lt;/code&gt; sous Ubuntu) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;éditer le fichier &lt;code&gt;/etc/default/docker&lt;/code&gt; puis renseigner la variable d’environnement &lt;code&gt;DOCKER_OPTS&lt;/code&gt; comme suit :
&lt;pre&gt;
DOCKER_OPTS=&amp;quot;-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&amp;quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;redémarrer le démon docker :
&lt;pre&gt;
&lt;strong&gt;ksahnine@orion:~$&lt;/strong&gt; sudo service docker restart
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A ce stade, le démon écoute sur le port TCP &lt;code&gt;2375&lt;/code&gt; ainsi que sur le socket UNIX &lt;code&gt;/var/run/docker.sock&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Le fichier &lt;code&gt;/etc/default/docker&lt;/code&gt; n’est présent que sous Ubuntu. A défaut, il faudra renseigner et exporter la variable d’environnement &lt;code&gt;DOCKER_OPTS&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Côté client (&lt;code&gt;laptop.local&lt;/code&gt;) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pour interroger l’hôte Docker depuis une autre machine, utiliser la commande docker en renseignant l’option &lt;code&gt;-H&lt;/code&gt; avec l’adresse et le port d’écoute de l’hôte Docker distant.
&lt;br /&gt;L’exemple ci-dessous permet d’afficher la liste des conteneurs actifs sur l’hôte Docker distant :
&lt;pre&gt;
ksahnine@laptop:~$ docker -H=192.168.0.29:2375 ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
6faede9c46af        nginx:latest        “nginx -g ‘daemon of   12 minutes ago      Up 12 minutes       80/tcp, 443/tcp     sleepy_lalande
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; On peut aussi renseigner la variable d’environnement &lt;code&gt;DOCKER_HOST&lt;/code&gt; sur le poste client (&lt;code&gt;export DOCKER_HOST=192.168.0.29:2375&lt;/code&gt;) et lancer tout simplement la commande &lt;code&gt;docker ps&lt;/code&gt; sans l’option &lt;code&gt;-H&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A l’aide de &lt;code&gt;tcpdump&lt;/code&gt;, interceptons les échanges entre le client Docker et l’hôte Docker distant :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo tcpdump -c &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; -s &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; -i en1 -A host 192.168.0.29 and tcp port 2375&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On remarquera que la requête issue de la commande &lt;code&gt;docker ps&lt;/code&gt; est la suivante :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET /v1.18/containers/json HTTP/1.1
Host: 192.168.0.29:2375
User-Agent: Docker-Client/1.6.0
Accept-Encoding: gzip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On pourrait donc se passer du client Docker et utiliser directement l’utilitaire &lt;strong&gt;cURL&lt;/strong&gt;, dont la commande équivalente à &lt;code&gt;docker ps&lt;/code&gt; serait :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;curl -X GET http://192.168.0.29:2375/v1.18/containers/json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Activer Docker Remote API avec certificat TLS&lt;/h2&gt;

&lt;p&gt;Il nous faut tout d’abord produire 3 certificats :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le &lt;strong&gt;certificat racine&lt;/strong&gt; utilisé comme autorité de certification. Il sera utilisé pour signer les certificats client et serveur.&lt;/li&gt;
&lt;li&gt;le &lt;strong&gt;certificat serveur&lt;/strong&gt; installé et utilisé par l’hôte Docker&lt;/li&gt;
&lt;li&gt;le &lt;strong&gt;certificat client&lt;/strong&gt; installé et utilisé par le client Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je mets à disposition un &lt;a href=&quot;https://github.com/ksahnine/docker/blob/master/gen-docker-certs.sh&quot;&gt;script shell&lt;/a&gt; permettant de générer les certificats de test et dont voici le mode opératoire d’utilisation correspondant à notre cas :
&lt;pre&gt;
&lt;strong&gt;ksahnine@orion:~$&lt;/strong&gt; wget https://raw.githubusercontent.com/ksahnine/docker/master/gen-docker-certs.sh
&lt;strong&gt;ksahnine@orion:~$&lt;/strong&gt; sh gen-docker-certs.sh
- Nom de l’hôte Docker : orion
- Adresse IP de l’hôte Docker : 192.168.0.29
&lt;/pre&gt;
Le script produit :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le certificat &lt;strong&gt;racine&lt;/strong&gt; (clé publique &lt;code&gt;ca.pem&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;le certificat &lt;strong&gt;client&lt;/strong&gt; (clé publique &lt;code&gt;cert.pem&lt;/code&gt; / clé privée &lt;code&gt;key.pem&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;le certificat &lt;strong&gt;serveur&lt;/strong&gt; (clé publique &lt;code&gt;server.pem&lt;/code&gt; / clé privée &lt;code&gt;server-key.pem&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passons à la configuration du serveur et du client Docker.&lt;/p&gt;

&lt;p&gt;Côté serveur (&lt;code&gt;orion.local&lt;/code&gt; sous Ubuntu) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copier les fichier &lt;code&gt;ca.pem&lt;/code&gt;, &lt;code&gt;server.pem&lt;/code&gt; et &lt;code&gt;server-key.pem&lt;/code&gt; dans le répertoire &lt;code&gt;/root/.docker&lt;/code&gt; (ou tout autre répertoire sécurisé)&lt;/li&gt;
&lt;li&gt;éditer le fichier &lt;code&gt;/etc/default/docker&lt;/code&gt; puis renseigner la variable d’environnement &lt;code&gt;DOCKER_OPTS&lt;/code&gt; comme suit :
&lt;pre&gt;
DOCKER_OPTS=&amp;quot;--tlsverify --tlscacert=/root/.docker/ca.pem --tlscert=/root/.docker/server.pem \
 --tlskey=/root/.docker/server-key.pem -H=unix:///var/run/docker.sock -H=0.0.0.0:2376&amp;quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;redémarrer le démon docker :
&lt;pre&gt;
&lt;strong&gt;ksahnine@orion:~$&lt;/strong&gt; sudo service docker restart
&lt;/pre&gt;
A ce stade, le démon écoute sur le socket UNIX &lt;code&gt;/var/run/docker.sock&lt;/code&gt; ainsi que sur le port TCP &lt;code&gt;2376&lt;/code&gt;, port utilisé par convention pour les échanges sécurisés.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Côté client (&lt;code&gt;laptop.local&lt;/code&gt;) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copier les fichiers &lt;code&gt;ca.pem&lt;/code&gt;, &lt;code&gt;cert.pem&lt;/code&gt; et &lt;code&gt;key.pem&lt;/code&gt; dans le répertoire &lt;code&gt;~/.docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;utiliser la commande &lt;code&gt;docker&lt;/code&gt; avec le flag &lt;code&gt;--tlsverify&lt;/code&gt; pour passer en mode TLS.
&lt;br /&gt;L’exemple ci-dessous permet d’afficher la liste des conteneurs actifs sur l’hôte Docker distant :
&lt;pre&gt;
&lt;strong&gt;ksahnine@laptop:~$&lt;/strong&gt; docker –tlsverify -H=192.168.0.29:2376 ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
6faede9c46af        nginx:latest        “nginx -g ‘daemon of   12 minutes ago      Up 12 minutes       80/tcp, 443/tcp     sleepy_lalande
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Vous avez noté que je n’ai pas passé explicitement les clés dans la ligne de commande. Par défaut, le client docker s’attend à trouver le certificat racine sous &lt;code&gt;~/.docker/ca.pem&lt;/code&gt;, le certificat client sous &lt;code&gt;~/.docker/cert.pem&lt;/code&gt; et la clé privée sous &lt;code&gt;~/.docker/key.pem&lt;/code&gt;.
Si les noms des clés diffèrent ou s’ils sont localisés dans un autre répertoire, il faudra utiliser respectivement les options &lt;code&gt;--tlscacert&lt;/code&gt;, &lt;code&gt;--tlscert&lt;/code&gt; et &lt;code&gt;--tlskey&lt;/code&gt;.
Le flag &lt;code&gt;--tlsverify&lt;/code&gt; peut être omis si la variable d’environnement &lt;code&gt;DOCKER_TLS_VERIFY&lt;/code&gt; est valorisée à &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Utilisation avec Docker Machine&lt;/h2&gt;

&lt;p&gt;Si vous gérez plusieurs hôtes Docker répartis sur un LAN et/ou dans un cloud public, il est beaucoup plus pratique de travailler avec &lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;&lt;strong&gt;Docker Machine&lt;/strong&gt;&lt;/a&gt; depuis un simple ordinateur portable.&lt;br /&gt;
Dans le cas de cet article, un hôte Docker est déjà provisionné sur le serveur Linux &lt;code&gt;orion.local&lt;/code&gt; (&lt;code&gt;192.168.0.29&lt;/code&gt;).&lt;br /&gt;
Rajoutons l’hôte sous le nom &lt;code&gt;orionbox&lt;/code&gt; :
&lt;pre&gt;
&lt;strong&gt;ksahnine@laptop:~$&lt;/strong&gt; docker-machine create –driver none –url=tcp://192.168.0.29:2376 orionbox
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;La commande &lt;code&gt;docker-machine ls&lt;/code&gt; le confirme :
&lt;pre&gt;
&lt;strong&gt;ksahnine@laptop:~$&lt;/strong&gt; docker-machine ls
NAME       ACTIVE   DRIVER   STATE   URL                       SWARM
orionbox   *        none             tcp://192.168.0.29:2376
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Copier les certificats client, serveur et racine précédemment générés (fichiers &lt;code&gt;ca.pem&lt;/code&gt;, &lt;code&gt;cert.pem&lt;/code&gt;, &lt;code&gt;key.pem&lt;/code&gt;, &lt;code&gt;server.pem&lt;/code&gt; et &lt;code&gt;server-key.pem&lt;/code&gt;) dans le répertoire &lt;code&gt;~/.docker/machine/machines/orionbox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La commande &lt;code&gt;docker-machine env&lt;/code&gt; affiche les variables d’environnement à positionner pour forcer le client docker à interagir avec une machine particulière, &lt;code&gt;orionbox&lt;/code&gt; dans notre cas :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ksahnine@laptop:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-machine env orionbox
Bad port ‘0′
ERRO&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0002&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Error running SSH &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to get /etc/os-release: &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 255
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_TLS_VERIFY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_CERT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;”/Users/ksahnine/.docker/machine/machines/orionbox”
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tcp://192.168.0.29:2376&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Remarquez l’erreur d’exécution obtenue en sortie. A ma connaissance, l’utilisation de l’option &lt;code&gt;--driver none&lt;/code&gt; ne permet pas de configurer d’authentification par clés SSH afin que Docker Machine puisse exécuter des commandes à distance.
A ce jour, Docker Machine est encore en version bêta (v 0.20). Sauf erreur de ma part, il faudra attendre la publication du driver generic actuellement &lt;a href=&quot;https://github.com/docker/machine/tree/master/drivers/generic&quot;&gt;en cours de développement&lt;/a&gt;. Il devrait permettre de provisionner un hôte Docker sur n’importe quel serveur existant accessible par SSH, un peu à la manière &lt;a href=&quot;http://blog.inovia-conseil.fr/blog.inovia-conseil.fr/?p=180&quot;&gt;d’Ansible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mise à jour 29/06/2015&lt;/strong&gt; : Le driver &lt;code&gt;generic&lt;/code&gt; est désormais disponible depuis la &lt;a href=&quot;https://github.com/docker/machine/releases/tag/v0.3.0&quot;&gt;version 0.3 de Docker Machine&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Passons outre le message d’erreur et positionnons les variables d’environnements comme suit :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_TLS_VERIFY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_CERT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/ksahnine/.docker/machine/machines/orionbox&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tcp://192.168.0.29:2376&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ou plus simplement :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env orionbox&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C’est terminé. Notre client Docker est configuré pour interagir avec l’hôte docker distant.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 May 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/docker/architecture/2015/05/16/docker-remote-api.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/docker/architecture/2015/05/16/docker-remote-api.html</guid>
        
        <category>regular</category>
        
        
        <category>docker</category>
        
        <category>architecture</category>
        
      </item>
    
      <item>
        <title>Démystifier CORS</title>
        <description>&lt;p&gt;J’ai eu souvent l’occasion d’écrire ici que les grands acteurs du Web sont plus que jamais les &lt;strong&gt;nouveaux prescripteurs de solutions&lt;/strong&gt; pour le SI.&lt;/p&gt;

&lt;p&gt;Même si l’organisme &lt;strong&gt;W3C&lt;/strong&gt; agit comme une puissance normative, seules les spécifications validées par l’expérience des grands carrefours d’audience bâtis par &lt;em&gt;Google&lt;/em&gt;, &lt;em&gt;Amazon&lt;/em&gt;, &lt;em&gt;Facebook&lt;/em&gt; ou &lt;em&gt;Twitter&lt;/em&gt; deviennent des normes effectives. Le feu de l’expérience fait office de contreseing, préalable à l’adoption dans les Systèmes d’Information d’Entreprise.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;/a&gt; (pour Cross-Origin Resource Sharing) fait partie de ces spécifications largement supportées par les grands du Web et appelées à se généraliser au gré du déploiement grandissant des navigateurs de dernière génération.&lt;/p&gt;

&lt;h2&gt;Le futur de JSONP&lt;/h2&gt;

&lt;p&gt;Depuis des années, les navigateurs restreignent l’accès à des ressources n’appartenant pas au domaine depuis lequel un document a été chargé (règle dite de &lt;a href=&quot;http://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;&lt;strong&gt;Same-Origin Policy&lt;/strong&gt;&lt;/a&gt;).&lt;br /&gt;
Le fait que la balise &lt;code&gt;&amp;lt;script /&amp;gt;&lt;/code&gt; ne soit pas concernée par cette restriction a ouvert la voie à la technique &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;&lt;strong&gt;JSONP&lt;/strong&gt;&lt;/a&gt; (&lt;em&gt;JSON with padding&lt;/em&gt;), permettant d’émettre des requêtes AJAX cross-domain retournant des données JSON encapsulées dans une fonction de rappel (&lt;em&gt;callback&lt;/em&gt;) en JavaScript. Il faut admettre cependant que cette technique, bien qu’encore très utilisée, relève surtout de l’astuce.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CORS&lt;/strong&gt; est un mécanisme robuste et &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;normalisé par le W3C&lt;/a&gt; permettant à tout navigateur compatible d’effectuer des &lt;strong&gt;requêtes HTTP cross-domain&lt;/strong&gt;. Il a valeur de standard industriel et étend le champ des possibilités bien au delà de ce qui est actuellement permis par JSONP.&lt;/p&gt;

&lt;p&gt;JSONP est très pratique pour partager des données publiques (comprendre non sensibles).&lt;br /&gt;
Néanmoins, cette technique ne supporte pas les méthodes &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; (seule la méthode &lt;code&gt;GET&lt;/code&gt; est supportée). Elle n’est donc à priori pas adaptée pour exposer une API JSON sauf à mettre en place des solutions de contournement (méthode HTTP transmise via un paramètre de requête, contrôles d’accès, etc.).&lt;/p&gt;

&lt;h2&gt;Une affaire d&amp;#39;entêtes HTTP&lt;/h2&gt;

&lt;p&gt;En pratique, le mécanisme CORS est fondé sur l’utilisation d’&lt;strong&gt;entêtes HTTP personnalisés&lt;/strong&gt; définis par la &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;spécification&lt;/a&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/cors/#origin-request-header&quot;&gt;entêtes de requête&lt;/a&gt; :

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Method&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Headers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/cors/#access-control-allow-origin-response-header&quot;&gt;entêtes de réponse&lt;/a&gt; :

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Expose-Headers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ils permettent au navigateur et au serveur d’en savoir suffisamment l’un sur l’autre afin de déterminer si la requête ou la réponse &lt;em&gt;cross-domain&lt;/em&gt; doit réussir ou échouer.&lt;/p&gt;

&lt;p&gt;Pour fonctionner, le mécanisme nécessite :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un navigateur supportant cette technologie :

&lt;ul&gt;
&lt;li&gt;Internet Explorer 10+&lt;/li&gt;
&lt;li&gt;Firefox 3.5+&lt;/li&gt;
&lt;li&gt;Chrome 3+&lt;/li&gt;
&lt;li&gt;Safari 4+ &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;une partie serveur capable de produire le ou les entêtes HTTP idoines&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; IE 8 et 9 ont un support partiel de CORS. Retenir en particulier que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;les méthodes HTTP &lt;code&gt;PUT&lt;/code&gt; et &lt;code&gt;DELETE&lt;/code&gt; ne sont pas supportées&lt;/li&gt;
&lt;li&gt;les requêtes à entête HTTP &lt;code&gt;Content-Type&lt;/code&gt; ne peuvent contenir que la valeur &lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;les requêtes émises ne peuvent pas contenir de cookies&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Exemple&lt;/h2&gt;

&lt;p&gt;Le code ci-dessous permet d’afficher les vignettes des 25 vidéos Youtube les plus populaires :
&lt;script src=&quot;https://gist.github.com/9cfca5492994fbf924bd.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;La page HTML est servie par le serveur &lt;code&gt;inoviabook.local&lt;/code&gt;, tandis que les données sont issues du serveur &lt;code&gt;gdata.youtube.com&lt;/code&gt; :
&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/04/arch-cors.png&quot; alt=&quot;CORS&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;La requête AJAX échouerait si le navigateur ne supportait pas CORS. Comment la magie opère-t-elle ? Le mystère se dissipe en analysant la requête / réponse AJAX vers les serveurs de Youtube :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/04/req-1.png&quot; alt=&quot;Entête de la requête CORS&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Le &lt;em&gt;navigateur&lt;/em&gt; ajoute l’entête &lt;code&gt;Origin&lt;/code&gt; avant d’émettre la requête cross-domain. Il contient le schéma HTTP, le serveur et le port de provenance (&lt;code&gt;http://inoviabook.local:8000&lt;/code&gt;) de la page (&lt;code&gt;youtube.html&lt;/code&gt;) à l’initiative de l’appel CORS.
Pour des raisons de sécurité, seul le navigateur est responsable de la valorisation de cet entête HTTP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/04/resp-1.png&quot; alt=&quot;Entête de la réponse CORS&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;La réponse du &lt;strong&gt;serveur&lt;/strong&gt; contient l’entête &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; permettant d’indiquer au client qu’il est bien habilité à obtenir une réponse valide. La requête échouerait si l’entête n’était pas présent ou s’il contenait une valeur &lt;strong&gt;ne concordant pas&lt;/strong&gt; avec la valeur de l’entête &lt;code&gt;Origin&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quelques observations :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Le moyen de plus simple d’avoir un serveur avec support CORS unilatéral serait d’ajouter l’entête &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt; dans toutes les réponses HTTP.&lt;/li&gt;
&lt;li&gt;La requête de l’exemple ci-dessus échouerait si &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; valait &lt;code&gt;http://inoviabook.local:80&lt;/code&gt; car le numéro de port ne concorderait pas avec celui de l’entête &lt;code&gt;Origin&lt;/code&gt; (&lt;code&gt;8000&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;La requête de l’exemple ci-dessus échouerait si &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; valait &lt;code&gt;https://inoviabook.local:8000&lt;/code&gt; car le schéma HTTPS ne concorderait pas avec celui de l’entête &lt;code&gt;Origin&lt;/code&gt; (&lt;code&gt;http&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;La requête fonctionnerait si &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; valait &lt;code&gt;http://*.local:8000&lt;/code&gt;
car la valeur concorderait avec l’entête &lt;code&gt;Origin&lt;/code&gt; (&lt;code&gt;http://inoviabook.local:8000&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Les requêtes de contrôle préliminaires (preflight requests)&lt;/h2&gt;

&lt;p&gt;Un navigateur supportant CORS peut, dans certaines conditions explicitées ci-après, envoyer une &lt;strong&gt;requête de contrôle préliminaire&lt;/strong&gt; (&lt;em&gt;preflight request&lt;/em&gt;) afin de demander la permission au serveur d’envoyer la requête réelle. Si le serveur ne répond pas correctement à la requête préliminaire, le navigateur n’enverra pas la requête réelle et l’objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; remontera une erreur.&lt;/p&gt;

&lt;p&gt;Une requête préliminaire est automatiquement émise par le navigateur dans les 2 cas de figure suivants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la requête utilise une méthode HTTP différente de &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; ou &lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;la requête contient un entête HTTP &lt;code&gt;Content-Type&lt;/code&gt; dont la valeur est différente de :

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si nous modifions légèrement le code de notre exemple en renseignant l’entête &lt;code&gt;Content-Type&lt;/code&gt; à &lt;code&gt;application/json&lt;/code&gt; (rajouter &lt;code&gt;contentType: &amp;#39;application/json&amp;#39;&lt;/code&gt; aux settings de la fonction &lt;code&gt;$.ajax()&lt;/code&gt;), le navigateur envoie la requête préliminaire suivante :
&lt;pre&gt;
&lt;strong&gt;OPTIONS&lt;/strong&gt; /feeds/api/standardfeeds/most_popular?v=2&amp;amp;alt=json HTTP/1.1
Host: gdata.youtube.com
origin: http://inoviabook.local:8000
&lt;strong&gt;access-control-request-method:&lt;/strong&gt; GET
&lt;strong&gt;access-control-request-headers:&lt;/strong&gt; accept, content-type
…
&lt;/pre&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On notera qu’une requête préliminaire utilise la méthode HTTP &lt;code&gt;OPTIONS&lt;/code&gt;.
Remarquez l’utilisation des entêtes de requête &lt;code&gt;access-control-request-method&lt;/code&gt; et &lt;code&gt;access-control-request-headers&lt;/code&gt;. Par ce biais, le navigateur demande la permission au serveur s’il est bien autorisé à utiliser respectivement la méthode HTTP &lt;code&gt;GET&lt;/code&gt; et les requêtes HTTP &lt;code&gt;Accept&lt;/code&gt; et &lt;code&gt;Content-Type&lt;/code&gt; contenus dans la requête réelle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La réponse (correcte) du serveur est la suivante :
&lt;pre&gt;
HTTP/1.1 200 OK
X-GData-User-Country: FR
Access-Control-Allow-Origin: http://inoviabook.local:8000
&lt;strong&gt;Access-Control-Allow-Headers:&lt;/strong&gt; accept,content-type
&lt;strong&gt;Access-Control-Allow-Methods:&lt;/strong&gt; DELETE,GET,HEAD,PATCH,POST,PUT
Content-Type: text/plain
…
&lt;/pre&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On remarquera la présence des entêtes &lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; et &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; contenant respectivement la liste des entêtes et méthodes HTTP permises par le serveur.
Leurs valeurs concordent avec celles des entêtes de requête &lt;code&gt;Access-Control-Request-Method&lt;/code&gt; et &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt;. La réponse vaut donc autorisation pour le navigateur d’émettre la requête réelle, celle retournant la liste des 25 vidéos Youtube les plus populaires.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/04/cors-preflight.png&quot; alt=&quot;Requête CORS avec requête préliminaire&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Les requêtes de contrôle peuvent poser des &lt;strong&gt;problèmes de performance&lt;/strong&gt; car elles ont pour conséquence de doubler le nombre de &lt;em&gt;hits&lt;/em&gt; vers le serveur. &lt;br /&gt;
Pour limiter le nombre de requêtes préliminaires, le serveur peut forcer le navigateur à mettre en cache la requête en rajoutant l’entête HTTP &lt;code&gt;Access-Control-Max-Age&lt;/code&gt; dans la réponse.&lt;br /&gt;
Voici un exemple pour une mise en cache pendant 1 heure :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Access-Control-Max-Age: 3600&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Cookies et authentification&lt;/h2&gt;

&lt;p&gt;Par défaut, les requêtes cross-domain interdisent la propagation de cookies, de vecteurs d’accréditation ou de certificats SSL client.&lt;br /&gt;
Pour lever cette interdiction, il faut opérer quelques modifications côté client et serveur.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;côté client&lt;/em&gt; : renseigner la propriété &lt;code&gt;withCredentials&lt;/code&gt; de l’objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; à &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Sous jQuery, modifier les settings de la fonction &lt;code&gt;$.ajax()&lt;/code&gt; en modifiant la propriété &lt;code&gt;xhrFields&lt;/code&gt; :&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;xhrFields:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;withCredentials:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;côté serveur&lt;/em&gt; : renseigner l’entête HTTP &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt; à &lt;code&gt;true&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Access-Control-Allow-Credentials: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Exposer les entêtes personnalisées des réponses&lt;/h2&gt;

&lt;p&gt;CORS est assez rigide dans l’utilisation des entêtes HTTP personnalisées.&lt;br /&gt;
Imaginons que votre API soit conçue pour retourner le numéro de version détaillée d’un service (ou tout autre méta-donnée utile fonctionnellement) dans l’entête personnalisées &lt;code&gt;X-App-Version&lt;/code&gt;. &lt;br /&gt;
Sachez que le contenu de l’entête &lt;strong&gt;ne pourra pas être lue par le client sans une autorisation explicite du serveur&lt;/strong&gt;.&lt;br /&gt;
Concrètement, le serveur doit préciser dans chaque réponse la liste des entêtes personnalisées exposées au client via l’entête &lt;code&gt;Access-Control-Expose-Headers&lt;/code&gt;.&lt;br /&gt;
Dans notre cas de figure, le serveur devra retourner :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Access-Control-Expose-Headers: X-App-Version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/architecture/rest/cors/2015/04/19/demystifier-cors.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/architecture/rest/cors/2015/04/19/demystifier-cors.html</guid>
        
        <category>regular</category>
        
        
        <category>architecture</category>
        
        <category>rest</category>
        
        <category>cors</category>
        
      </item>
    
      <item>
        <title>Système de découverte de services par DNS : Docker et Consul - 2/2</title>
        <description>&lt;p&gt;Dans mon &lt;a href=&quot;/docker/consul/microservice/2015/03/30/dns-docker-consul-part-1.html&quot;&gt;article précédent&lt;/a&gt;, dont la lecture est un préalable, j’avais décrit les principes de la &lt;strong&gt;découverte de services par DNS&lt;/strong&gt; comme technique de communication entre conteneurs Docker et ce, indépendamment de leur localisation physique sur un serveur hôte.&lt;br /&gt;
Lors de sa &lt;a href=&quot;/docker/consul/microservice/2015/03/30/dns-docker-consul-part-1.html&quot;&gt;mise en oeuvre pratique&lt;/a&gt; avec un registre &lt;strong&gt;Consul&lt;/strong&gt;, nous avions vu en particulier que l’enregistrement manuel des services via l’&lt;a href=&quot;https://www.consul.io/docs/agent/http/agent.html#agent_service_register&quot;&gt;&lt;strong&gt;API Agent&lt;/strong&gt;&lt;/a&gt; pouvait être fastidieuse.&lt;/p&gt;

&lt;p&gt;Dans ce second volet de la série, nous mettrons l’accent sur une technique d’enregistrement à chaud de services dockerisés grâce à &lt;a href=&quot;https://github.com/gliderlabs/registrator&quot;&gt;&lt;strong&gt;Registrator&lt;/strong&gt;&lt;/a&gt;, développé par &lt;a href=&quot;http://progrium.com/blog/&quot;&gt;Jeff Lindsay&lt;/a&gt; et disponible &lt;a href=&quot;https://registry.hub.docker.com/u/gliderlabs/registrator/&quot;&gt;sous la fome d’une image Docker&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Etude de cas&lt;/h2&gt;

&lt;p&gt;Le schéma ci-dessous décrit l’architecture d’un cluster constitué de 3 noeuds hébergeant chacun un &lt;strong&gt;agent Consul&lt;/strong&gt; et un &lt;strong&gt;hôte Docker&lt;/strong&gt;. &lt;br /&gt;
Sur chacun des hôtes Docker sont déployés :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un conteneur &lt;strong&gt;Registrator&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;un conteneur hébergeant un &lt;strong&gt;web service&lt;/strong&gt; HTTP (respectivement &lt;code&gt;svc1&lt;/code&gt;, &lt;code&gt;svc2&lt;/code&gt; et &lt;code&gt;svc3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/04/consul-cluster-registrator.png&quot; alt=&quot;Architecture Docker/Consul/Registrator&quot;&gt;&lt;/p&gt;

&lt;p&gt;Pour accompagner la lecture de cet article, le cluster décrit ci-dessus est provisionnable localement via une configuration &lt;strong&gt;Vagrant&lt;/strong&gt; que je mets à disposition sur &lt;em&gt;Github&lt;/em&gt;, et dont la mise en oeuvre est des plus simples :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/ksahnine/vagrant-config.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vagrant-config/consul-cluster-registrator
vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Repartez de cette configuration si vous souhaitez reproduire les exemples de l’article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Le temps de construction et de démarrage du cluster en partant de zéro est long. Compter plusieurs (longues) minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Fonctionnement&lt;/h2&gt;

&lt;p&gt;Lors de l’initialisation du cluster, chaque noeud démarre :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un agent &lt;em&gt;Consul&lt;/em&gt; (en mode serveur sur &lt;code&gt;node1&lt;/code&gt;) : l’&lt;strong&gt;API HTTP Agent&lt;/strong&gt; est alors accessible sur le port &lt;code&gt;8500&lt;/code&gt; de chaque agent&lt;/li&gt;
&lt;li&gt;un conteneur &lt;em&gt;Registrator&lt;/em&gt; :

&lt;ul&gt;
&lt;li&gt;à l’écoute des évènements Docker &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;die&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt; et &lt;code&gt;kill&lt;/code&gt; des conteneurs co-localisés&lt;/li&gt;
&lt;li&gt;connecté à l’agent &lt;em&gt;Consul&lt;/em&gt; de l’hôte Docker sur lequel il est déployé
&lt;br /&gt;Ainsi, le démarrage du conteneur &lt;em&gt;Registrator&lt;/em&gt; sur &lt;code&gt;node1&lt;/code&gt; (adresse IP &lt;code&gt;172.20.20.10&lt;/code&gt;) s’effectue comme suit :&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run -d -v /var/run/docker.sock:/tmp/docker.sock -h node1 gliderlabs/registrator consul://172.20.20.10:8500&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A ce stade, &lt;em&gt;Registrator&lt;/em&gt; est prêt à intercepter les évènements de tout conteneur susceptible d’être créé ou détruit, à l’issue de quoi il met à jour en conséquence le registre &lt;em&gt;Consul&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; le fonctionnement d’un cluster Consul est décrit dans la &lt;a href=&quot;/docker/consul/microservice/2015/03/30/dns-docker-consul-part-1.html&quot;&gt;première partie de cet article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Un cas pratique d&amp;#39;enregistrement de service à chaud&lt;/h2&gt;

&lt;p&gt;Le cluster étant opérationnel, commençons par déployer le service &lt;code&gt;svc4&lt;/code&gt; sur le serveur &lt;code&gt;node3&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node3
vagrant@node3:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -td -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;SERVICE_NAME=svc4&amp;quot;&lt;/span&gt; -p 8084:8080 --name svc4 ksahnine/dummy-http svc4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On notera que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la &lt;strong&gt;variable d’environnement&lt;/strong&gt; &lt;code&gt;SERVICE_NAME=svc4&lt;/code&gt; permet d’attribuer explicitement le nom du service dans le registre. Dans notre exemple, le service dockerisé sera accessible via le FQDN &lt;code&gt;svc4.service.consul&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Registrator&lt;/em&gt; enregistre le service à l’interception de l’évènement &lt;code&gt;start&lt;/code&gt; via l’API &lt;a href=&quot;https://www.consul.io/docs/agent/http/agent.html#agent_service_register&quot;&gt;&lt;code&gt;/v1/agent/service/register&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Registrator&lt;/em&gt; désenregistre le service à l’interception des évènements &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;kill&lt;/code&gt; et &lt;code&gt;die&lt;/code&gt;, via l’API &lt;a href=&quot;https://www.consul.io/docs/agent/http/agent.html#agent_service_deregister&quot;&gt;&lt;code&gt;/v1/agent/service/deregister&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En interrogeant Consul via l’API DNS, on constate que le nouveau service est correctement enregistré et déployé sur le noeud 3 :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @172.20.20.10 svc4.service.consul SRV

&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;svc4.service.consul.        IN  SRV

&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; ANSWER SECTION:
svc4.service.consul.    0   IN  SRV &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8084&lt;/span&gt; node3.node.dc1.consul.

&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; ADDITIONAL SECTION:
node3.node.dc1.consul.  0   IN  A   172.20.20.30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enfin, appelons ce service depuis un conteneur Docker issu de l’image &lt;code&gt;tutum/curl&lt;/code&gt; déployé sur le serveur &lt;code&gt;node2&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node2
vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -ti --dns 172.20.20.10 --dns-search service.consul tutum/curl
root@afc268967ce9:/# curl http://svc4:8084/
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc4] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.4&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Arrêtons le conteneur &lt;code&gt;svc4&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node3
vagrant@node3:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;kill &lt;/span&gt;svc4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On constate que le service &lt;code&gt;svc4.service.consul&lt;/code&gt; a été désenregistré à chaud :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node3:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig +short @172.20.20.10 svc4.service.consul
vagrant@node3:~&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voilà. Le registre &lt;em&gt;Consul&lt;/em&gt; est mis à jour dynamiquement et reflète parfaitement le plan de déploiement des services dockerisés, ce qui est éminemment utile dans une &lt;strong&gt;architecture de microservices&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/docker/consul/microservice/2015/04/08/dns-docker-consul-part-2.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/docker/consul/microservice/2015/04/08/dns-docker-consul-part-2.html</guid>
        
        <category>regular</category>
        
        
        <category>docker</category>
        
        <category>consul</category>
        
        <category>microservice</category>
        
      </item>
    
      <item>
        <title>Système de découverte de services par DNS : Docker et Consul - 1/2</title>
        <description>&lt;p&gt;Comme je l’évoquais dans un précédent billet, il y a tout lieu de penser que les &lt;strong&gt;architectures de microservices&lt;/strong&gt; et &lt;strong&gt;polyglottes&lt;/strong&gt; constituent un horizon proche des Systèmes d’Information d’Entreprise, quand ce n’est pas déjà une réalité pour de grands acteurs du web (&lt;em&gt;Netflix&lt;/em&gt;, &lt;em&gt;Airbnb&lt;/em&gt;).&lt;br /&gt;
Dans ce contexte, &lt;strong&gt;Docker&lt;/strong&gt; apparait comme une véritable bénédiction tant ses qualités sont en symbiose parfaite avec ce nouveau paradigme. Il répond remarquablement aux besoins :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d’&lt;strong&gt;isolation&lt;/strong&gt; de l’environnement d’exécution d’un service&lt;/li&gt;
&lt;li&gt;de déploiement &lt;strong&gt;rapide&lt;/strong&gt; et sans couture&lt;/li&gt;
&lt;li&gt;de &lt;strong&gt;portabilité&lt;/strong&gt; et de &lt;strong&gt;scalabilité&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;de compatibilité avec des solutions d’hébergement dans un &lt;strong&gt;Cloud&lt;/strong&gt; privé, public ou hybride&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cependant, la communication entre conteneurs Docker répartis sur plusieurs machines hôtes n’est vraiment pas triviale à mettre en oeuvre.&lt;br /&gt;
Dans le cas d’une architecture constituée d’un très grand nombre de microservices dockerisés, la difficulté peut conduire au &lt;a href=&quot;http://fr.wikipedia.org/wiki/Le_Radeau_de_La_M%C3%A9duse&quot;&gt;naufrage&lt;/a&gt;…&lt;br /&gt;
Il existe deux approches pour traiter ce problème complexe :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le &lt;strong&gt;paradigme&lt;/strong&gt; &lt;a href=&quot;https://fr.wikipedia.org/wiki/Software_Defined_Networking&quot;&gt;&lt;strong&gt;SDN&lt;/strong&gt;&lt;/a&gt; (Software-Defined Networking), notamment mis en oeuvre par &lt;a href=&quot;&quot;&gt;&lt;strong&gt;Weave&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://openvswitch.org/&quot;&gt;&lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/a&gt; ou &lt;a href=&quot;https://github.com/socketplane/socketplane&quot;&gt;&lt;strong&gt;Socketplane&lt;/strong&gt;&lt;/a&gt;, permet de construire un &lt;strong&gt;réseau virtuel de conteneurs&lt;/strong&gt; répartis sur plusieurs hôtes Docker. A ce propos, &lt;a href=&quot;https://blog.docker.com/2015/03/socketplane-excited-to-be-joining-docker-to-collaborate-with-networking-ecosystem/&quot;&gt;l’acquisition récente de Socketplane&lt;/a&gt; par &lt;em&gt;Docker Inc&lt;/em&gt; semble annoncer l’apparition prochaine d’une sorte “d’API réseau” standardisée dans l’écosystème Docker.&lt;/li&gt;
&lt;li&gt;la &lt;strong&gt;découverte de service&lt;/strong&gt; est une technique permettant de trouver une ressource (application, service) sur un réseau. Cette technique n’est pas spécifique au monde Docker bien sûr (songez au DNS) mais elle a fait ses preuves dans cet écosystème grâce à l’adoption grandissante de &lt;a href=&quot;https://consul.io/&quot;&gt;&lt;strong&gt;Consul&lt;/strong&gt;&lt;/a&gt; et &lt;a href=&quot;https://github.com/skynetservices/skydns/&quot;&gt;&lt;strong&gt;SkyDNS2&lt;/strong&gt;&lt;/a&gt; / &lt;a href=&quot;https://coreos.com/docs/distributed-configuration/getting-started-with-etcd/&quot;&gt;&lt;strong&gt;etcd&lt;/strong&gt;&lt;/a&gt;, des solutions de découverte de service, distribuées et hautement disponibles. On ne résout pas l’intégralité des problèmes de communication inter-conteneurs, mais disons que ce modèle est suffisant dans la plupart des cas d’utilisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C’est cette dernière approche que je vous propose d’étudier car elle a le mérite d’être peu intrusive et plus simple à mettre en oeuvre qu’un SDN.&lt;br /&gt;
En pratique, nous verrons comment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;installer et configurer un cluster Consul (sur un environnement provisionnable localement avec &lt;strong&gt;Vagrant&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;enregistrer des services dockerisés&lt;/li&gt;
&lt;li&gt;communiquer avec un service depuis un conteneur Docker, sans connaitre sa localisation physique (adresse IP ou FQDN)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Consul : présentation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Consul&lt;/strong&gt; est une solution de découverte de service, distribuée et hautement disponible, développée par la société &lt;a href=&quot;https://www.hashicorp.com/&quot;&gt;Hashicorp&lt;/a&gt; (dont le fondateur est le créateur de &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;).&lt;br /&gt;
Par ailleurs, &lt;strong&gt;Consul&lt;/strong&gt; est également :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un datastore distribué de type clé/valeur pour le stockage d’éléments de configuration&lt;/li&gt;
&lt;li&gt;un système de supervision de services (bilan de santé, détection de pannes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Consul&lt;/em&gt; est disponible sous &lt;a href=&quot;https://consul.io/downloads.html&quot;&gt;Linux, Windows et Mac OS&lt;/a&gt; mais seule l’utilisation sous Linux est recommandée en production.&lt;br /&gt;
Le schéma ci-dessous décrit l’architecture d’un cluster constitué de 3 noeuds hébergeant chacun un &lt;strong&gt;agent Consul&lt;/strong&gt; et un &lt;strong&gt;hôte Docker&lt;/strong&gt;. J’ai également représentés sur ce schéma les &lt;strong&gt;services dockerisés&lt;/strong&gt; déployés (&lt;code&gt;svc1&lt;/code&gt;, &lt;code&gt;svc2&lt;/code&gt; et &lt;code&gt;svc3&lt;/code&gt;), dont certains sont redondants (&lt;code&gt;svc1&lt;/code&gt; et &lt;code&gt;svc2&lt;/code&gt;) :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/03/consul-cluster.png&quot; alt=&quot;Architecture Docker/Consul&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Je mets à disposition &lt;a href=&quot;https://github.com/ksahnine/vagrant-config&quot;&gt;deux configurations Vagrant&lt;/a&gt; pour provisionner localement ce cluster et expérimenter vous même les exemples illustrant cet article. Pour les impatients, consultez directement le paragraphe &lt;a href=&quot;#1&quot;&gt;suivant&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Un &lt;strong&gt;agent&lt;/strong&gt; Consul est un composant essentiel chargé d’enregistrer les services, répondre aux requêtes, collecter des informations du cluster etc.&lt;br /&gt;
S’exécutant sur chaque noeud du cluster, il peut fonctionner en mode &lt;strong&gt;client&lt;/strong&gt; ou &lt;strong&gt;serveur&lt;/strong&gt;. Le cluster doit disposer d’au moins un agent serveur. Au delà, un mécanisme d’élection du &lt;strong&gt;leader&lt;/strong&gt; du cluster permet d’attribuer ce rôle à un des agents serveur. En production, il est recommandé d’avoir de 3 à 5 agents serveur par cluster pour éviter toute perte de données en cas de panne d’un des serveurs.&lt;/p&gt;

&lt;p&gt;Chaque agent supporte 3 protocoles de communication :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RPC (port par défaut &lt;code&gt;8400&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;HTTP (port par défaut &lt;code&gt;8500&lt;/code&gt;) : une &lt;a href=&quot;https://www.consul.io/docs/agent/http.html&quot;&gt;API RESTful est exposée&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DNS (port par défaut `8600)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les ports &lt;code&gt;8300&lt;/code&gt;, &lt;code&gt;8301&lt;/code&gt; et &lt;code&gt;8302&lt;/code&gt; sont des ports internes réservés à la communication entre agents.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt;Configuration Vagrant&lt;/h2&gt;

&lt;p&gt;Pour accompagner la lecture de cet article, deux configurations du cluster sont provisionnables localement via &lt;strong&gt;Vagrant&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configuration &lt;strong&gt;partielle&lt;/strong&gt; : services Dockers &lt;code&gt;svc1&lt;/code&gt;, &lt;code&gt;svc2&lt;/code&gt; et &lt;code&gt;svc3&lt;/code&gt; provisionnés mais pas de cluster Consul :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/ksahnine/vagrant-config.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vagrant-config/consul-cluster-blank
vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;Repartez de cette configuration si vous souhaiter reproduire les exemples de l’article.
- Configuration complète : services Dockers &lt;code&gt;svc1&lt;/code&gt;, &lt;code&gt;svc2&lt;/code&gt; et &lt;code&gt;svc3&lt;/code&gt; provisionnés, cluster Consul configuré et provisionné :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/ksahnine/vagrant-config.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vagrant-config/consul-cluster-services
vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Le temps de construction et de démarrage du cluster en partant de zéro est long. Compter plusieurs minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Mise en oeuvre du cluster&lt;/h2&gt;

&lt;p&gt;Commençons par démarrer l’agent du premier noeud en mode serveur sur &lt;code&gt;node1&lt;/code&gt; dont l’IP privée est &lt;code&gt;172.20.20.10&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node1
vagrant@node1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;consul agent -node node1 -server -bootstrap-expect &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -data-dir /tmp/consul &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                              -client 172.20.20.10  -advertise 172.20.20.10 &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L’agent revendique le rôle de leader du cluster :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2015/03/29 13:58:13 [INFO] raft: Node at 172.20.20.10:8300 [Candidate] entering Candidate state
2015/03/29 13:58:13 [INFO] raft: Election won. Tally: 1
2015/03/29 13:58:13 [INFO] raft: Node at 172.20.20.10:8300 [Leader] entering Leader state&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On notera que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le flag &lt;code&gt;-node&lt;/code&gt; permet d’attribuer un nom à l’agent (&lt;code&gt;node1&lt;/code&gt; dans le cas présent)&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;-server&lt;/code&gt; permet de configurer l’agent en mode serveur&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;-bootstrap-expect 1&lt;/code&gt; est suivi du nombre d’agent serveur devant être actifs avant que le cluster ne soit opérationnel. Dans notre cas, on aurait pu utiliser le flag &lt;code&gt;-bootstrap&lt;/code&gt; car il n’y a qu’un agent serveur.&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;-client&lt;/code&gt; définit l’&lt;strong&gt;adresse client&lt;/strong&gt; de l’agent exposant les interfaces DNS, HTTP et RPC.&lt;/li&gt;
&lt;li&gt;le flag &lt;code&gt;-advertise&lt;/code&gt; définit l’&lt;strong&gt;adresse cluster&lt;/strong&gt; de l’agent, c’est-à-dire l’adresse IP atteignable par les autres agents du cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; On peut également externaliser les paramètres de l’agent dans un fichier de configuration au format JSON et activer l’agent via la commande &lt;code&gt;consul agent -config-file conf/node1.json&lt;/code&gt; :
&lt;script src=&quot;https://gist.github.com/e3e6d1fa27c7c08a1ea4.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sur le &lt;strong&gt;deuxième noeud&lt;/strong&gt; (&lt;code&gt;node2&lt;/code&gt; dont l’IP privée est &lt;code&gt;172.20.20.20&lt;/code&gt;), démarrons l’agent consul en mode client :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node2
vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;consul agent -node node2 -data-dir /tmp/consul &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         -client 172.20.20.20 -advertise 172.20.20.20 &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A ce stade, le deuxième agent n’a toujours pas rejoint le cluster. Pour ce faire, utiliser la commande &lt;code&gt;consul join&lt;/code&gt; suivie de l’adresse IP du leader (&lt;code&gt;node1&lt;/code&gt;) :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;consul join -rpc-addr 172.20.20.20:8400 172.20.20.10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Procédons de même sur le &lt;strong&gt;troisième noeud&lt;/strong&gt; (&lt;code&gt;node3.local&lt;/code&gt; dont l’IP privée est &lt;code&gt;10.10.0.3&lt;/code&gt;) mais en une seule commande grâce au flag &lt;code&gt;-join&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node3
vagrant@node3:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;consul agent -node node3 -data-dir /tmp/consul &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          -client 172.20.20.30 -advertise 172.20.20.30 -join 172.20.20.10 &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour connaître l’état du cluster Consul, utiliser la commande &lt;code&gt;consul members&lt;/code&gt; sur n’importe quel noeud :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node3:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;consul members -rpc-addr 172.20.20.30:8400
Node   Address             Status  Type    Build  Protocol
node3  172.20.20.30:8301   alive   client  0.5.0  2
node2  172.20.20.20:8301   alive   client  0.5.0  2
node1  172.20.20.10:8301   alive   server  0.5.0  2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; si un des agents client venait à tomber, son statut passerait de &lt;code&gt;alive&lt;/code&gt; à &lt;code&gt;left&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Voilà. Le cluster est maintenant opérationnel.&lt;/p&gt;

&lt;h2&gt;Enregistrement, désenregistrement et découverte de services par DNS&lt;/h2&gt;

&lt;p&gt;Chaque agent expose une &lt;strong&gt;API HTTP&lt;/strong&gt; permettant d’enregistrer, désenregistrer ou consulter les services qu’il administre.&lt;br /&gt;
On peut consulter la définition d’un service (nom, adresse IP, port) via l’API HTTP ou l’API DNS (rappelons que chaque agent fait aussi office de resolver DNS).&lt;/p&gt;

&lt;h3&gt;Enregistrement&lt;/h3&gt;

&lt;p&gt;Enregistrons les 2 instances du service &lt;code&gt;svc1&lt;/code&gt; des noeuds &lt;code&gt;node1&lt;/code&gt; et &lt;code&gt;node2&lt;/code&gt; (port &lt;code&gt;8081&lt;/code&gt;) :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;node1@vagrant:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -XPUT 172.20.20.10:8500/v1/agent/service/register -d &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;id&amp;quot;:&amp;quot;svc1_instance_1&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;name&amp;quot;: &amp;quot;svc1&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;address&amp;quot;: &amp;quot;172.20.20.10&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;port&amp;quot;: 8081,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;tags&amp;quot;: [&amp;quot;api&amp;quot;] }&amp;#39;&lt;/span&gt;

node1@vagrant:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -XPUT 172.20.20.20:8500/v1/agent/service/register -d &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;id&amp;quot;:&amp;quot;svc1_instance_2&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;name&amp;quot;: &amp;quot;svc1&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;address&amp;quot;: &amp;quot;172.20.20.20&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;port&amp;quot;: 8081,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;quot;tags&amp;quot;: [&amp;quot;api&amp;quot;] }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La déclaration manuelle des services peut sembler fastidieuse à bien des égards.&lt;br /&gt;
Dans le prochain article de la série, nous mettrons en place une solution &lt;em&gt;&amp;quot;plug and play&amp;quot;&lt;/em&gt; permettant d’enregistrer automatiquement un service dockerisé au démarrage du conteneur et de désenregistrement de celui-ci lorsque qu’il s’arrête.&lt;/p&gt;

&lt;h3&gt;Découverte par DNS&lt;/h3&gt;

&lt;p&gt;Un service est déclaré dans le DNS Consul sous la forme d’un &lt;strong&gt;enregistrement&lt;/strong&gt; &lt;a href=&quot;http://fr.wikipedia.org/wiki/Enregistrement_de_service&quot;&gt;&lt;strong&gt;SRV&lt;/strong&gt;&lt;/a&gt; (ou enregistrement de service) suffixé par &lt;code&gt;.service.consul&lt;/code&gt;.&lt;br /&gt;
Ainsi, les noms pleinement qualifiés des 3 services dockerisés seront :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;srv1.service.consul&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;srv2.service.consul&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;srv3.service.consul&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interrogeons le DNS Consul, via l’agent sur &lt;code&gt;node1&lt;/code&gt;/&lt;code&gt;172.20.20.10&lt;/code&gt;, pour localiser le service &lt;code&gt;svc1.service.consul&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node2
vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @172.20.20.10 -p &lt;span class=&quot;m&quot;&gt;8600&lt;/span&gt; svc1.service.consul SRV&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On observe que le service est bien déclaré sur &lt;code&gt;172.20.20.10:8081&lt;/code&gt; et &lt;code&gt;172.20.20.20:8081&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;;; ANSWER SECTION:
svc1.service.consul.    0   IN  SRV 1 1 8081 node2.node.dc1.consul.
svc1.service.consul.    0   IN  SRV 1 1 8081 node1.node.dc1.consul.

;; ADDITIONAL SECTION:
node2.node.dc1.consul.  0   IN  A   172.20.20.20
node1.node.dc1.consul.  0   IN  A   172.20.20.10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On remarquera que l’ordre d’apparition des adresses IP lors de la résolution du nom de service est &lt;strong&gt;aléatoire&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig +short @172.20.20.10 -p &lt;span class=&quot;m&quot;&gt;8600&lt;/span&gt; svc1.service.consul
172.20.20.20
172.20.20.10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En requêtant une fraction de seconde plus tard, l’ordre a changé :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig +short @172.20.20.10 -p &lt;span class=&quot;m&quot;&gt;8600&lt;/span&gt; svc1.service.consul
172.20.20.10
172.20.20.20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Il est ainsi possible de répartir aléatoirement la charge sur l’une ou l’autre instance du service, ouvrant la voie à une API RESTful &lt;strong&gt;scalable horizontalement&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Désenregistrement&lt;/h3&gt;

&lt;p&gt;Le point de terminaison &lt;code&gt;/v1/agent/service/deregister/&lt;/code&gt; exposé par l’API HTTP de l’agent permet de désenregistrer un service dont il a la charge :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant@node1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -XGET 172.20.20.10:8500/v1/agent/service/deregister/svc1_instance_1
vagrant@node1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -XGET 172.20.20.20:8500/v1/agent/service/deregister/svc1_instance_2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Communiquer avec un service depuis un conteneur Docker&lt;/h2&gt;

&lt;p&gt;Voyons comment appeler le service dockerisé &lt;code&gt;svc1.service.consul&lt;/code&gt; déployé sur &lt;code&gt;node1&lt;/code&gt; et &lt;code&gt;node2&lt;/code&gt; depuis un conteneur Docker situé sur &lt;code&gt;node3&lt;/code&gt;.&lt;br /&gt;
Nous utiliserons l’image Docker &lt;code&gt;tutum/curl&lt;/code&gt; de l’hébergeur &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt; pour la démonstration :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vagrant ssh node3
vagrant@node3:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -ti --dns 172.20.20.10 --dns-search service.consul tutum/curl
root@200b369020f6:/# curl http://svc1:8081/
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc1] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
root@200b369020f6:/# curl http://svc1:8081/
Hi! I&lt;span class=&quot;s1&quot;&gt;&amp;#39;m [svc1] service and my Docker container&amp;#39;&lt;/span&gt;s IP is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;172.17.0.3&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Le flag &lt;code&gt;--dns&lt;/code&gt; est suivi de l’adresse IP de l’agent Consul du noeud 1 utilisé comme resolver DNS.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Cela ne fonctionne que si l’agent est configuré pour écouter les requêtes DNS sur le port 53 (le port DNS Consul par défaut étant 8600).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Le flag &lt;code&gt;--dns-search&lt;/code&gt; permet de forcer les recherches DNS sur le domaine passé en paramètre.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 08:00:00 +0200</pubDate>
        <link>http://ksahnine.github.io/docker/consul/microservice/2015/03/30/dns-docker-consul-part-1.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/docker/consul/microservice/2015/03/30/dns-docker-consul-part-1.html</guid>
        
        <category>regular</category>
        
        
        <category>docker</category>
        
        <category>consul</category>
        
        <category>microservice</category>
        
      </item>
    
      <item>
        <title>De l&#39;intêret de Docker Compose (ex Fig) pour le développeur AngularJS</title>
        <description>&lt;p&gt;Il y a plus de 5 ans (en janvier 2010), j’avais écrit un petit billet intitulé &lt;em&gt;L’inexorable migration du tiers Présentation&lt;/em&gt; pour marquer l’émergence des &lt;strong&gt;frameworks MV* côté client&lt;/strong&gt; et ce, à une époque où &lt;strong&gt;JSF&lt;/strong&gt; constituait encore un horizon indépassable au sein de nombreuses maîtrises d’oeuvre.&lt;br /&gt;
Fort heureusement, les temps ont changé en particulier depuis la déferlante &lt;a href=&quot;https://angularjs.org/&quot;&gt;&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;/a&gt;, à telle enseigne que ce type de solution est désormais sur le point de devenir &lt;em&gt;mainstream&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Dans la caisse à outil du développeur &lt;strong&gt;AngularJS&lt;/strong&gt; (entre autre), on trouvera naturellement le gestionnaire de paquets &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/a&gt;, le gestionnaire de dépendances &lt;a href=&quot;http://bower.io/&quot;&gt;&lt;strong&gt;bower&lt;/strong&gt;&lt;/a&gt; et l’outil d’automatisation &lt;a href=&quot;http://gruntjs.com/&quot;&gt;&lt;strong&gt;grunt&lt;/strong&gt;&lt;/a&gt; (ou &lt;a href=&quot;http://gulpjs.com/&quot;&gt;&lt;strong&gt;gulp&lt;/strong&gt;&lt;/a&gt;), mais on verra surtout dans cet article combien &lt;a href=&quot;http://docs.docker.com/compose/&quot;&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;&lt;/a&gt; (anciennement &lt;a href=&quot;http://www.fig.sh/&quot;&gt;&lt;strong&gt;Fig&lt;/strong&gt;&lt;/a&gt;) a sa place dans le dispositif, en particulier pour construire un environnement d’exécution calibré pour un projet et de le rendre &lt;strong&gt;opérationnel sur un poste de développement en une seule commande&lt;/strong&gt; : &lt;code&gt;docker-compose up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En effet, dans un projet informatique impliquant plusieurs développeurs, la mise au point d’un environnement de développement s’avère être une tâche ardue et chronophage.&lt;br /&gt;
Nous allons voir à travers l’étude d’un cas pratique comment &lt;strong&gt;Docker Compose&lt;/strong&gt; nous permettra de reconstituer un environnement d’exécution complet et autonome sur le poste du développeur par assemblage d’applications dockerisées.&lt;/p&gt;

&lt;h2&gt;Etude de cas&lt;/h2&gt;

&lt;p&gt;Dans le sillage de ma série d’articles traitant des architectures de microservices, en particulier celui consacré au développement d’une API RESTful avec &lt;strong&gt;Dropwizard&lt;/strong&gt;, j’ai mis à disposition une application &lt;em&gt;AngularJS&lt;/em&gt; permettant de consulter le trafic du métro parisien et dont le code source est &lt;a href=&quot;https://github.com/ksahnine/ratp-gui-angularjs&quot;&gt;disponible sur Github&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/03/metro-gui.png&quot; alt=&quot;IHM AngularJS&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Cette application servira de support à l’article.&lt;/p&gt;

&lt;p&gt;Le schéma ci-dessous décrit l’architecture type de l’environnement d’exécution du poste de développement que nous allons mettre au point avec &lt;strong&gt;Docker Compose&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/03/archi-poste-dev.png&quot; alt=&quot;Architecture&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Elle est constituée :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d’un frontend &lt;strong&gt;AngularJS&lt;/strong&gt; dont on a fait mention ci-dessus&lt;/li&gt;
&lt;li&gt;d’un backend de services REST que j’ai développé avec &lt;strong&gt;Dropwizard&lt;/strong&gt;, et dont l’image Docker est &lt;a href=&quot;https://registry.hub.docker.com/u/ksahnine/ratp-rest-api/&quot;&gt;disponible dans mon repository&lt;/a&gt; public Docker Hub&lt;/li&gt;
&lt;li&gt;d’une base NoSQL orientée document (&lt;strong&gt;CouchDB&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;d’un serveur web &lt;strong&gt;nginx&lt;/strong&gt; servant :

&lt;ul&gt;
&lt;li&gt;les ressources statiques de l’espace de travail du projet AngularJS (code JavaScript, template HTML, code CSS etc.)&lt;/li&gt;
&lt;li&gt;les ressources dynamiques (JSON) exposées par le backend &lt;strong&gt;Dropwizard&lt;/strong&gt; et accessibles par convention via le préfixe &lt;code&gt;/api&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Docker Compose, un orchestrateur de conteneurs Docker&lt;/h2&gt;

&lt;p&gt;Développé par &lt;a href=&quot;https://www.orchardup.com/&quot;&gt;Orchard&lt;/a&gt;, une start-up de 2 personnes (!) rachetée par Docker en Juillet 2014, &lt;strong&gt;Fig&lt;/strong&gt; est devenu la solution standard d’orchestration de conteneurs Docker.
&lt;strong&gt;Docker Compose&lt;/strong&gt; est le résultat de l’intégration de &lt;strong&gt;Fig&lt;/strong&gt; dans l’écosystème Docker.&lt;/p&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Docker Compose&lt;/em&gt; est disponible sous la forme d’un module Python installable via l’outil de gestion de paquets PIP.&lt;br /&gt;
Le mode opératoire d’installation est des plus simples :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo pip install -U docker-compose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Utilisation&lt;/h3&gt;

&lt;p&gt;La composition de notre infrastructure est décrite dans le fichier &lt;code&gt;docker-compose.yml&lt;/code&gt; au format YAML et dont voici le contenu :
&lt;script src=&quot;https://gist.github.com/2cfd5a5b4b02265d4be9.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Nous retrouvons les 3 composants dockerisés de notre architecture :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt; : le conteneur nginx construit à partir de l’image &lt;code&gt;nginx:1.7.9&lt;/code&gt;.
&lt;br /&gt;On notera en particulier l’usage du mapping des volumes pour :

&lt;ul&gt;
&lt;li&gt;redéfinir la racine du conteneur web afin de servir des ressources du système de fichier local issu de la construction du projet via &lt;strong&gt;grunt&lt;/strong&gt; : &lt;code&gt;~/dev/ratp-gui-angularjs/dist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;utiliser un fichier de configuration &lt;em&gt;nginx&lt;/em&gt; calibré pour le projet et disponible localement : &lt;code&gt;~/dev/ratp-gui-angularjs/conf/nginx-dev.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ws&lt;/code&gt; : le backend de service REST construit à partir de l’image &lt;code&gt;ksahnine/ratp-rest-api:1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; : la base &lt;em&gt;NoSQL&lt;/em&gt; construite à partir de l’image &lt;code&gt;fedora/couchdb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Récupérons le code source du projet &lt;strong&gt;AngularJS&lt;/strong&gt; contenant le fichier &lt;code&gt;docker-compose.yml&lt;/code&gt; à la racine :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/ksahnine/ratp-gui-angularjs.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ratp-gui-angularjs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour construire le projet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;installer préalablement les dépendances :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install
bower install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;construire l’application AngularJS via &lt;strong&gt;grunt&lt;/strong&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;grunt all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour créer et démarrer les conteneurs, il suffit de lancer la commande :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker-compose up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour créer et démarrer les conteneurs en tâche de fond, rajouter l’option &lt;code&gt;-d&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker-compose up -d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour afficher la sortie standard des conteneurs, utiliser la commande :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker-compose logs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour arrêter les conteneurs, utiliser la commande :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker-compose stop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour supprimer les conteneurs, utiliser la commande :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker-compose rm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;A l&amp;#39;attention des utilisateurs de Fig&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fig&lt;/strong&gt; n’est plus maintenu depuis Décembre 2014, date de son remplacement officiel par &lt;strong&gt;Docker Compose&lt;/strong&gt;.&lt;br /&gt;
Néanmoins au cas où vous l’utiliseriez, voici quelques-uns de mes retours d’expérience :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sous Mac OS X, j’ai rencontré l’erreur suivante à l’exécution de la commande &lt;code&gt;fig up&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;SSL error: hostname ‘192.168.59.103′ doesn’t match ‘boot2docker’&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le certificat est signé vis-à-vis du nom d’hôte (&lt;code&gt;boot2docker&lt;/code&gt;) et non de son adresse IP.
&lt;br /&gt;On peut contourner le problème :&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; en rajoutant une entrée dans le fichier &lt;code&gt;/etc/hosts&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;192.168.59.103 boot2docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;en modifiant et exportant la variable &lt;code&gt;DOCKER_HOST&lt;/code&gt; comme suit :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tcp://boot2docker:2376&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;le fichier de composition &lt;code&gt;fig.yml&lt;/code&gt; est encore reconnu par Docker Compose (v 1.1.0) mais ce ne sera bientôt plus le cas.&lt;/li&gt;
&lt;li&gt;enfin, &lt;strong&gt;Fig&lt;/strong&gt; contient un bug non résolu à ce jour (version 1.0.1 associée à Docker 1.4.0). La modification du paramétrage des volumes dans le fichier &lt;code&gt;fig.yml&lt;/code&gt; après un `fig up n’est jamais prise en compte (les volumes ne sont pas re-montés).&lt;br /&gt;On peut contourner le problème en forçant préalablement la suppression des conteneurs à l’arrêt via la commande :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;fig rm –force&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Mar 2015 07:00:00 +0100</pubDate>
        <link>http://ksahnine.github.io/docker/angularjs/2015/03/02/docker-compose-angularjs.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/docker/angularjs/2015/03/02/docker-compose-angularjs.html</guid>
        
        <category>regular</category>
        
        
        <category>docker</category>
        
        <category>angularjs</category>
        
      </item>
    
      <item>
        <title>Provisionner des microservices avec Ansible et Docker</title>
        <description>&lt;p&gt;C’est bien connu, la fainéantise est la plus grande qualité d’un administrateur système.&lt;br /&gt;
Si ce dernier est en outre un inconditionnel de &lt;a href=&quot;http://puppetlabs.com/&quot;&gt;&lt;strong&gt;Puppet&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;&lt;strong&gt;Chef&lt;/strong&gt;&lt;/a&gt; ou &lt;a href=&quot;http://www.ansible.com/&quot;&gt;&lt;strong&gt;Ansible&lt;/strong&gt;&lt;/a&gt;, c’est qu’il élève l’indolence au rang de valeur cardinale.&lt;br /&gt;
C’est dans cet état d’esprit que nous allons voir comment provisionner depuis un ordinateur portable et avec très peu d’efforts, une plateforme d’hébergement de microservices à l’aide de &lt;strong&gt;Docker&lt;/strong&gt; et &lt;strong&gt;Ansible&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Ansible : présentation et fonctionnement&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ansible.com/&quot;&gt;&lt;strong&gt;Ansible&lt;/strong&gt;&lt;/a&gt; est un outil automatisant la configuration et la gestion d’un parc de machines.&lt;br /&gt;
Ecrit en Python et doté de &lt;a href=&quot;http://docs.ansible.com/modules_by_category.html&quot;&gt;nombreux modules&lt;/a&gt; extensibles, il permet de réaliser à distance des tâches aussi diverses que l’installation et la configuration d’une application, le montage d’un système de fichiers ou le déploiement sur le cloud EC2 d’Amazon.&lt;br /&gt;
&lt;strong&gt;Aucun agent n’est installé sur les machines à administrer&lt;/strong&gt;, les seuls pré-requis étant la disponibilité de &lt;strong&gt;SSH&lt;/strong&gt; et &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un &lt;strong&gt;module Ansible&lt;/strong&gt; est une unité de traitement réutilisable écrite en Python et effectuant une tâche précise. Par exemple, le module &lt;a href=&quot;http://docs.ansible.com/shell_module.html&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; permet d’exécuter une commande quelconque sur une machine distante.&lt;br /&gt;
Lorsque qu’une tâche Ansible est lancée depuis le poste de contrôle, Ansible :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;transfère via SSH le ou les modules dans le répertoire temporaire &lt;code&gt;~/.ansible/tmp&lt;/code&gt; du serveur distant&lt;/li&gt;
&lt;li&gt;exécute via SSH le ou les modules sur le serveur distant&lt;/li&gt;
&lt;li&gt;analyse la sortie standard du module (au format JSON)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si, comme on le verra dans notre cas d’utilisation, les clés publiques SSH sont déployées sur les serveurs distants, Ansible peut ouvrir une connexion SSH sans avoir besoin de mot de passe.&lt;/p&gt;

&lt;h2&gt;Exercice pratique&lt;/h2&gt;

&lt;p&gt;Dans de précédents articles d’&lt;em&gt;Inovia Blog&lt;/em&gt;, nous avions d’une part développé un service REST de consultation des horaires du métro avec &lt;em&gt;Dropwizard&lt;/em&gt; et d’autre part dockerisé celui-ci (l’image &lt;code&gt;ksahnine/ratp-rest-api:1.0&lt;/code&gt; est &lt;a href=&quot;https://registry.hub.docker.com/u/ksahnine/ratp-rest-api/&quot;&gt;disponible sur mon repository public sur &lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;).&lt;br /&gt;
Nous allons repartir de cet exemple pour construire l’infrastructure hébergeant ce service.&lt;br /&gt;
Toutes les tâches de construction et de configuration de l’infrastructure, décrite dans le schéma ci-dessous, sont coordonnées par Ansible et exécutées depuis un ordinateur portable (&lt;code&gt;laptop.local&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/01/ansible-docker-architecture.png&quot; alt=&quot;Architecture&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;L’infrastructure technique est constituées de 2 serveurs Linux :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pegase.loca&lt;/code&gt;l : un serveur sous &lt;em&gt;Arch Linux&lt;/em&gt; hébergeant un répartiteur de charge (&lt;em&gt;nginx&lt;/em&gt; configuré en loadbalancer)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orion.local&lt;/code&gt; : un serveur sous &lt;em&gt;Debian&lt;/em&gt; hébergeant 2 instances du service dockerisé sur 2 ports différents (&lt;code&gt;8080&lt;/code&gt; et &lt;code&gt;8081&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voici les tâches à réaliser sur chacun des noeuds :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;côté front (&lt;code&gt;pegase.local&lt;/code&gt;) :

&lt;ul&gt;
&lt;li&gt;installation de &lt;em&gt;nginx&lt;/em&gt; via le gestionnaire de paquets &lt;code&gt;pacman&lt;/code&gt; (on est sur un serveur &lt;em&gt;Arch Linux&lt;/em&gt;). &lt;br /&gt;Noter que &lt;em&gt;nginx&lt;/em&gt; aurait très bien pu être déployé dans un conteneur Docker.&lt;/li&gt;
&lt;li&gt;déploiement de la configuration &lt;em&gt;nginx&lt;/em&gt; pour répartir la charge sur les 2 instances du service&lt;/li&gt;
&lt;li&gt;redémarrage du serveur &lt;em&gt;nginx&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;côté back (&lt;code&gt;orion.local&lt;/code&gt;) :

&lt;ul&gt;
&lt;li&gt;installation de Docker, via le gestionnaire de paquets aptitude (&lt;code&gt;apt-get&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;provisionnement de 2 conteneurs Docker avec l’image du service de consultation des horaires du métro (image &lt;code&gt;ksahnine/ratp-rest-api:1.0&lt;/code&gt; disponible sur &lt;em&gt;Docker Hub&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Réaliser toutes ces tâches manuellement serait fastidieux et potentiellement source d’erreur. Avec Ansible, &lt;strong&gt;toutes ces tâches peuvent être réalisées en une seule commande&lt;/strong&gt; et sans risque d’erreur.&lt;br /&gt;
Toutes les opérations qui vont suivre sont à réaliser sur la machine de contrôle, un simple portable dans notre cas (&lt;code&gt;laptop.local&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;Mise en oeuvre&lt;/h2&gt;

&lt;h3&gt;Installation de Ansible&lt;/h3&gt;

&lt;p&gt;Le mode opératoire d’installation le plus simple s’effectue via &lt;code&gt;brew&lt;/code&gt; (sous OS X) :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;brew install ansible&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ou &lt;code&gt;pip&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo pip install ansible&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Création et déploiement des clés SSH&lt;/h3&gt;

&lt;p&gt;Pour permettre à Ansible d’ouvrir une connexion SSH sans utiliser de mot de passe, nous allons mettre en oeuvre une &lt;strong&gt;authentification par clé SSH&lt;/strong&gt;.&lt;br /&gt;
Commençons par générer une paire de clés RSA2 sans &lt;em&gt;passphrase&lt;/em&gt; à l’aide de la commande &lt;code&gt;ssh-keygen&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ssh-keygen -t rsa -f ~/.ssh/id_rsa_galaxy -N &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;Galaxy&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La clé privée (fichier &lt;code&gt;~/.ssh/id_rsa_galaxy&lt;/code&gt;) reste évidemment sur le poste client (&lt;code&gt;laptop.local&lt;/code&gt;) et sera utilisée par Ansible.&lt;br /&gt;
En revanche, la clé publique (fichier &lt;code&gt;~/.ssh/id_rsa_galaxy.pub&lt;/code&gt;) doit être copiée sur les 2 serveurs à administrer (&lt;code&gt;orion.local&lt;/code&gt; et &lt;code&gt;pegase.local&lt;/code&gt;).&lt;br /&gt;
L’utilitaire &lt;code&gt;ssh-copy-id&lt;/code&gt; permet de copier une clé publique dans le fichier &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; des comptes d’exécution des serveurs distants :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ssh-copy-id -i ~/.ssh/id_galaxy.pub markab@pegase.local
ssh-copy-id -i ~/.ssh/id_galaxy.pub betelgeuse@orion.local&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sous OSX, vous pouvez installer l’utilitaire &lt;code&gt;ssh-copy-id&lt;/code&gt; comme suit :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Le fichier d’inventaire&lt;/h3&gt;

&lt;p&gt;Ce fichier au &lt;a href=&quot;http://fr.wikipedia.org/wiki/Fichier_INI&quot;&gt;format INI&lt;/a&gt; contient l’inventaire des machines orchestrées par Ansible (fichier &lt;code&gt;/etc/ansible/hosts&lt;/code&gt; par défaut), avec 2 serveurs dans notre cas :
&lt;script src=&quot;https://gist.github.com/15527b36a4470dde98ce.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Les comptes d’exécution des serveurs distants sont définis dans la variable Ansible &lt;code&gt;ansible_ssh_user&lt;/code&gt;.&lt;br /&gt;
Par ailleurs, la localisation de la clé privée utilisée pour l’ouverture des connexions SSH est définie dans la variable Ansible &lt;code&gt;ansible_ssh_private_key_file&lt;/code&gt;.&lt;br /&gt;
Enfin, on remarquera l’utilisation d’une variable personnalisée &lt;code&gt;env&lt;/code&gt; que l’on exploitera plus loin.&lt;/p&gt;

&lt;h3&gt;Le fichier Playbook : un Makefile de l’infrastructure&lt;/h3&gt;

&lt;p&gt;Les tâches de construction et de configuration de l’infrastructure sont décrites dans un langage très simple utilisant le format &lt;strong&gt;YAML&lt;/strong&gt; : le &lt;strong&gt;playbook&lt;/strong&gt;.&lt;br /&gt;
D’une certaine façon, &lt;strong&gt;le playbook est le Makefile de construction d’une infrastructure IT&lt;/strong&gt;. On pourrait également dire que le &lt;em&gt;playbook&lt;/em&gt; est à Ansible ce que le &lt;em&gt;Dockerfile&lt;/em&gt; est à Docker, mais au fond la paternité de cette idée revient au bon vieux &lt;em&gt;Makefile&lt;/em&gt; !&lt;br /&gt;
Le fichier &lt;code&gt;infra_services_playbook.yml&lt;/code&gt; ci-dessous décrit l’ensemble des tâches à réaliser pour notre environnement :
&lt;script src=&quot;https://gist.github.com/bb0872a005e25b675774.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Quelques observations sur la façon dont nous configurons &lt;em&gt;nginx&lt;/em&gt; dans le fichier &lt;em&gt;playbook&lt;/em&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- name: Configuration loadbalancer
  template: src=conf/loadbalancer-nginx-.conf dest=/etc/nginx/nginx.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On remarquera que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;le fichier de configuration &lt;em&gt;Nginx&lt;/em&gt; à déployer (&lt;code&gt;conf/loadbalancer-nginx-prod.conf&lt;/code&gt; dont le contenu figure ci-après) est stocké sur le poste de contrôle (&lt;code&gt;laptop.local&lt;/code&gt;).
&lt;script src=&quot;https://gist.github.com/b7e947a8f6e73d51a3d0.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Le fichier de destination (&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;) correspond au système de fichier du serveur distant (&lt;code&gt;pegase.local&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;le nom du fichier source est variabilisé dans le &lt;em&gt;playbook&lt;/em&gt; (variable &lt;code&gt;env&lt;/code&gt; déréférencée &lt;code&gt;{\{ env }}&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;la variable &lt;code&gt;env&lt;/code&gt; est renseignée dans le fichier d’inventaire &lt;code&gt;hosts.ini&lt;/code&gt; (&lt;code&gt;env=prod&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Construction de l’infrastructure&lt;/h3&gt;

&lt;p&gt;La commande &lt;code&gt;ansible-playbook&lt;/code&gt; permet d’exécuter un &lt;em&gt;playbook&lt;/em&gt;, et donc l’ensemble des tâches de construction de l’infrastructure. Il prend en paramètre le fichier d’inventaire (&lt;code&gt;-i hosts.ini&lt;/code&gt;) ainsi que le fichier &lt;em&gt;playbook&lt;/em&gt; &lt;code&gt;infra_services_playbook.yml&lt;/code&gt; décrit plus haut :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ansible-playbook -i hosts.ini infra_services_playbook.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voici le compte-rendu d’exécution du playbook affiché sur la sortie standard :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;PLAY &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;** Frontend **&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; *********************************************************

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Installation nginx&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ****************************************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pegase.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Configuration loadbalancer&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ********************************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pegase.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Redemarrage nginx&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; *****************************************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pegase.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

PLAY &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;** Backend **&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; **********************************************************

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Installation Docker&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; **************************************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;orion.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Arret des containers&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; **************************************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;orion.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Provisionnement du service &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;instance 1&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; *******************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;orion.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Provisionnement du service &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;instance 2&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; *******************************
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;orion.local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
orion.local                : &lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;unreachable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
pegase.local               : &lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;unreachable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et voilà !&lt;/p&gt;

&lt;p&gt;A noter que l’on pourrait élégamment utiliser le &lt;a href=&quot;http://docs.ansible.com/docker_module.html&quot;&gt;module Ansible docker&lt;/a&gt;, en installant préalablement le module Python &lt;a href=&quot;https://github.com/docker/docker-py&quot;&gt;&lt;em&gt;docker-py&lt;/em&gt;&lt;/a&gt; dont il dépend.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Feb 2015 07:00:00 +0100</pubDate>
        <link>http://ksahnine.github.io/microservice/ansible/docker/2015/02/01/ansible-docker.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/microservice/ansible/docker/2015/02/01/ansible-docker.html</guid>
        
        <category>regular</category>
        
        
        <category>microservice</category>
        
        <category>ansible</category>
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Dockeriser un microservice (Dropwizard + Docker)</title>
        <description>&lt;p&gt;L’association de &lt;strong&gt;Dropwizard&lt;/strong&gt; et &lt;strong&gt;Docker&lt;/strong&gt; constitue une solution fort intéressante pour une architecture orientée microservices.&lt;br /&gt;
En effet, elle répond remarquablement aux besoins :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d’&lt;strong&gt;isolation&lt;/strong&gt; de l’environnement d’exécution d’un service&lt;/li&gt;
&lt;li&gt;de déploiement &lt;strong&gt;rapide&lt;/strong&gt; et sans couture&lt;/li&gt;
&lt;li&gt;de &lt;strong&gt;portabilité&lt;/strong&gt; et de &lt;strong&gt;scalabilité&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;de compatibilité avec des solutions d’hébergement dans un &lt;strong&gt;Cloud&lt;/strong&gt; privé, public ou hybride&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accessoirement, une application &lt;em&gt;Dropwizard&lt;/em&gt; est packagée sous la forme d’un fichier &lt;em&gt;jar&lt;/em&gt; &lt;strong&gt;unique&lt;/strong&gt; et &lt;strong&gt;autonome&lt;/strong&gt; ce qui rendra d’autant plus simple la fabrication d’une image Docker comme on le verra dans cet article.&lt;/p&gt;

&lt;p&gt;En pratique, nous verrons comment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dockeriser&lt;/strong&gt; le service de consultation des horaires du métro parisien, une application &lt;em&gt;Dropwizard&lt;/em&gt; qui a fait l’objet du &lt;a href=&quot;/architecture/microservice/dropwizard/2015/01/19/developpement-microservice-dropwizard.html&quot;&gt;précédent billet de la série&lt;/a&gt; (sa lecture préalable est recommandée) et dont le &lt;a href=&quot;https://github.com/ksahnine/trafic-ratp-dropwizard&quot;&gt;code source est disponible&lt;/a&gt; sur GitHub&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;créer des environnements d’exécution cloisonnés&lt;/strong&gt; en mappant un volume de données du conteneur sur le système de fichier local&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;publier&lt;/strong&gt; l’image dans un dépôt privé (situé dans un réseau local) mais également dans le dépôt en ligne &lt;em&gt;Docker Hub&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Construction de l&amp;#39;image Docker&lt;/h2&gt;

&lt;p&gt;J’ai choisi une recette simple en construisant séparément :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l’application &lt;em&gt;Dropwizard&lt;/em&gt; matérialisée par le fichier &lt;em&gt;jar&lt;/em&gt; &lt;code&gt;trafic-ratp-1.0.0-SNAPSHOT.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;une image Docker dérivée de l’image publique d’OpenJDK 7 (&lt;code&gt;FROM dockerfile/java:openjdk-7-jdk&lt;/code&gt;) à laquelle on intègre le &lt;em&gt;jar&lt;/em&gt; de l’application précédemment fabriqué ainsi que son fichier de configuration (`trafic-ratp.yml)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le fichier &lt;code&gt;Dockerfile&lt;/code&gt; résultant est le suivant :
&lt;script src=&quot;https://gist.github.com/9f0f24f1d3073d2ceff6.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Quelques observations :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le premier paramètre de l’instruction &lt;code&gt;ADD&lt;/code&gt; correspond au fichier source à copier dans le conteneur (&lt;code&gt;target/trafic-ratp-1.0.0-SNAPSHOT.jar&lt;/code&gt;). &lt;br /&gt;Le chemin est relatif au répertoire contenant le fichier &lt;code&gt;Dockerfile&lt;/code&gt; (répertoire racine). Il n’est pas possible d’ajouter un fichier situé à l’extérieur du répertoire racine ou de ses sous-répertoires (par ex. &lt;code&gt;../dist/20150204/trafic-ratp-1.0.0-SNAPSHOT.jar&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;le second paramètre de l’instruction &lt;code&gt;ADD&lt;/code&gt; correspond au fichier de destination dans le système de fichiers du conteneur (&lt;code&gt;/app/trafic-ratp-1.0.0-SNAPSHOT.jar&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;le service est exposé par le conteneur sur le port &lt;code&gt;8080&lt;/code&gt; (instruction &lt;code&gt;EXPOSE&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La séquence complète de construction de l’image en repartant du code source sur GitHub se résume aux commandes suivantes :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/ksahnine/trafic-ratp-dropwizard.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;trafic-ratp-dropwizard
mvn package
docker build -t ksahnine:trafic-ratp-dropwizard .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si l’on ne dispose pas d’environnement de développement, on pourrait tout à fait &lt;em&gt;dockeriser&lt;/em&gt; l’étape de construction du microservice :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;en partant de l’image de base d’une &lt;em&gt;Debian&lt;/em&gt; (&lt;code&gt;FROM debian:wheezy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;sur laquelle on installerait &lt;em&gt;OpenJDK&lt;/em&gt; (&lt;code&gt;RUN apt-get install -y openjdk-7-jdk&lt;/code&gt;), &lt;em&gt;git&lt;/em&gt; (&lt;code&gt;RUN apt-get install -y git&lt;/code&gt;) et &lt;em&gt;Maven&lt;/em&gt; (&lt;code&gt;RUN apt-get install -y maven&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;suivie de la construction de l’application (récupération du code source et compilation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Démarrage du conteneur&lt;/h2&gt;

&lt;p&gt;Il n’existe pas d’hôte Docker natif pour les systèmes d’exploitation autres que Linux. Sous Windows ou Mac OS X, vous devez installer la VM ultra légère &lt;a href=&quot;http://boot2docker.io/&quot;&gt;Boot2docker&lt;/a&gt;, basée sur &lt;em&gt;Virtual Box&lt;/em&gt; et la distribution &lt;a href=&quot;http://tinycorelinux.net/&quot;&gt;&lt;em&gt;Tiny Core Linux&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://blog.inovia-conseil.fr/wp-content/uploads/2015/01/b2d.png&quot; alt=&quot;Hôte Docker&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Dans cette situation, les conteneurs Docker ne s’exécutent pas directement au dessus de l’OS mais &lt;strong&gt;au sein de la machine virtuelle&lt;/strong&gt; &lt;em&gt;Boot2docker&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La commande &lt;code&gt;docker run&lt;/code&gt; permet de lancer un conteneur à partir de l’image précédemment construite :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run -td -p 8080:8080 ksahnine:trafic-ratp-dropwizard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L’application embarquée dans le conteneur ne sera accessible qu’à travers l’adresse IP et le port &lt;strong&gt;de la VM&lt;/strong&gt; (et non &lt;code&gt;localhost&lt;/code&gt;).&lt;br /&gt;
La commande &lt;code&gt;boot2docker ip&lt;/code&gt; permet de connaître l’adresse IP de la VM :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ksahnine@inoviabook:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker ip
192.168.59.103&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le service &lt;em&gt;dockerisé&lt;/em&gt; est donc interrogeable via &lt;strong&gt;cURL&lt;/strong&gt; comme suit :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;curl -s http://192.168.59.103:8080/trafic-ratp/metro/14/pyramides/A&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Créer des environnements cloisonnés en mappant les volumes&lt;/h2&gt;

&lt;p&gt;Pour créer 2 environnements d’exécution distincts (appelons les &lt;em&gt;dev&lt;/em&gt; et &lt;em&gt;recette&lt;/em&gt;) à partir de la même image, il suffit de mapper le volume &lt;code&gt;/conf&lt;/code&gt; du conteneur vers le répertoire du système de fichier local contenant le fichier de configuration idoine :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configuration de &lt;em&gt;dev&lt;/em&gt; : &lt;code&gt;~/conf/dev/trafic-ratp-dropwizard.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;configuration de &lt;em&gt;recette&lt;/em&gt; : &lt;code&gt;~/conf/rec/trafic-ratp-dropwizard.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le fichier &lt;code&gt;Dockerfile&lt;/code&gt; initial a été très légèrement modifié de sorte à ne pas ajouter le fichier de configuration dans l’image :
&lt;script src=&quot;https://gist.github.com/43478d2d052622554361.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Ainsi, le démarrage des instances de &lt;em&gt;dev&lt;/em&gt; et &lt;em&gt;recette&lt;/em&gt; (ports &lt;code&gt;9010&lt;/code&gt; et &lt;code&gt;9020&lt;/code&gt;) s’effectue avec les commandes &lt;code&gt;docker run&lt;/code&gt; suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;dev&lt;/em&gt; : &lt;code&gt;docker run -t -p 9010:8080 -v ~/conf/dev:/conf --name svc-metro-dev ksahnine:trafic-ratp-dropwizard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;recette&lt;/em&gt; : &lt;code&gt;docker run -t -p 9020:8080 -v ~/conf/rec:/conf --name svc-metro-rec ksahnine:trafic-ratp-dropwizard&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’option &lt;code&gt;-v rep_local:rep_conteneur&lt;/code&gt; rend accessible le contenu d’un répertoire local (&lt;code&gt;rep_local&lt;/code&gt;) depuis le conteneur (&lt;code&gt;rep_conteneur&lt;/code&gt;).&lt;br /&gt;
Si vous travaillez sous Mac OS X, le point de montage du conteneur accède en réalité à la VM &lt;em&gt;boot2docker&lt;/em&gt; et non au système de fichier du Mac.&lt;br /&gt;
&lt;a href=&quot;https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/&quot;&gt;Depuis la version 1.3 de Docker&lt;/a&gt;, le montage de volume s’effectue sans couture mais est &lt;strong&gt;limité uniquement aux sous-répertoires contenus dans le répertoire&lt;/strong&gt; &lt;code&gt;/Users&lt;/code&gt;.&lt;br /&gt;
Pour les versions antérieures de Docker il est nécessaire d’installer une version modifiée de &lt;em&gt;boot2docker&lt;/em&gt; (lire cet &lt;a href=&quot;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&quot;&gt;excellent article&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Distribuer une image Docker&lt;/h2&gt;

&lt;h3&gt;Publier dans un index privé d’images&lt;/h3&gt;

&lt;p&gt;Il suffit d’une machine sur le réseau local (&lt;code&gt;192.168.0.29&lt;/code&gt; dans l’exemple ci-après) sur laquelle est installée Docker, puis d’installer et démarrer le registry en exécutant la commande suivante :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run -d -p 5000:5000 registry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La commande &lt;code&gt;docker push&lt;/code&gt; permet d’ajouter l’image de notre microservice dockerisé :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker tag ksahnine:trafic-ratp-dropwizard 192.168.0.29:5000/ksahnine:trafic-ratp-dropwizard
docker push 192.168.0.29:5000/ksahnine:trafic-ratp-dropwizard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L’accès à un index non sécurisé (HTTP) doit être explicitement autorisé au démarrage du démon docker (option &lt;code&gt;--insecure-registry&lt;/code&gt;), sous peine de rencontrer l’erreur suivante :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Error response from daemon: Invalid registry endpoint https://192.168.0.29:5000/v1/[...]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Avec &lt;code&gt;boot2docker&lt;/code&gt;, l’option peut être passée via la variable &lt;code&gt;EXTRA_ARGS&lt;/code&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accéder à la VM en mode &lt;em&gt;shell&lt;/em&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;boot2docker ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;puis renseigner la variable &lt;code&gt;EXTRA_ARGS&lt;/code&gt; dans le fichier &lt;code&gt;/var/lib/boot2docker/profile&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;EXTRA_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;–insecure-registry 192.168.0.29:5000&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;enfin sortir du &lt;em&gt;shell&lt;/em&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A noter que le client &lt;code&gt;boot2docker&lt;/code&gt; sera à relativement court terme remplacé par la commande &lt;code&gt;docker machine&lt;/code&gt; toujours en &lt;a href=&quot;https://github.com/docker/machine&quot;&gt;cours de développement&lt;/a&gt; à ce jour.&lt;/p&gt;

&lt;p&gt;Une simple interrogation de l’index via &lt;strong&gt;cURL&lt;/strong&gt; confirme que l’image a bien été publiée :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ksahnine@inoviabook:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -s http://192.168.0.29:5000/v1/repositories/ksahnine/tags &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;trafic-ratp-dropwizard&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;c1454f0f800331644e43971e56c1e391bf06625a13600fc52160fc1c927e6fa4&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Elle peut ensuite être récupérée via la commande &lt;code&gt;docker pull&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker pull 192.168.0.29:5000/ksahnine:trafic-ratp-dropwizard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;et enfin exécutée :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run -td -p 8080:8080 192.168.0.29:5000/ksahnine:trafic-ratp-dropwizard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Publier sur Docker Hub&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/account/signup/&quot;&gt;Docker Hub&lt;/a&gt; est le dépôt central des repositories hébergés chez Docker. L’hébergement d’index publics est gratuit tout comme le premier index privé (&lt;a href=&quot;https://registry.hub.docker.com/plans/&quot;&gt;payant au delà&lt;/a&gt;).&lt;br /&gt;
Mon repository public &lt;a href=&quot;https://registry.hub.docker.com/u/ksahnine/ratp-rest-api/&quot;&gt;&lt;code&gt;ksahnine/ratp-rest-api&lt;/code&gt;&lt;/a&gt; contient l’image de notre service dockerisé.&lt;br /&gt;
La publication de l’image dans le repository s’effectue comme suit :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker tag ksahnine:trafic-ratp-dropwizard ksahnine/ratp-rest-api:1.0
docker push ksahnine/ratp-rest-api:1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La récupération de l’image suivie de la création du conteneur et du démarrage du service depuis le hub s’effectue par cette simple commande :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run -td -p 8080:8080 ksahnine/ratp-rest-api:1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Sauvegarder et restaurer une image&lt;/h3&gt;

&lt;p&gt;Plus rustique, la commande &lt;code&gt;docker save&lt;/code&gt; permet d’exporter une image dans un fichier de &lt;em&gt;dump&lt;/em&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker save ksahnine:trafic-ratp-dropwizard &amp;gt; trafic-ratp-img.tar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Réciproquement, la commande &lt;code&gt;docker load&lt;/code&gt; permet de restaurer une image à partir d’un &lt;em&gt;dump&lt;/em&gt; :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker load ksahnine:trafic-ratp-dropwizard &amp;lt; trafic-ratp-img.tar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 21 Jan 2015 07:00:00 +0100</pubDate>
        <link>http://ksahnine.github.io/microservice/docker/dropwizard/2015/01/21/dockeriser-microservice.html</link>
        <guid isPermaLink="true">http://ksahnine.github.io/microservice/docker/dropwizard/2015/01/21/dockeriser-microservice.html</guid>
        
        <category>regular</category>
        
        
        <category>microservice</category>
        
        <category>docker</category>
        
        <category>dropwizard</category>
        
      </item>
    
  </channel>
</rss>
